# Copyright (C) 1998 Tuomas J. Lukka, 2000,2001 John Stewart, CRC Canada.
# DISTRIBUTED WITH NO WARRANTY, EXPRESS OR IMPLIED.
# See the GNU Library General Public License (file COPYING in the distribution)
# for conditions of use and redistribution, EXCEPT on the files
# which belong under the mozilla public license.
#
# $Id: INSTALL,v 1.6 2001/04/03 14:53:45 crc_canada Exp $
#


==================================================================

Introduction:
-------------

The complexity of the install depends on what packages you have installed 
with your system, and what packages may have been installed later.

I have tested the build on brand new builds of:

	SuSe 7.1 FTP'd on March 30-31 2001
	TurboLinux Workstation 4.0.5.SMC Tues Oct 19, 1999

NOTE: this test workstation has limited disk space, so I built with
the "Development Workstation" options - you may *not* have to do one
or two of the steps outlined below if you install everything.

At this point in time, my personal workstation usesRedHat 6.2.

Comments/help more than welcome.


This install is divided up into the following sections:

1) Building FreeWRL to run "standalone", without Netscape.
	
2) Installing Java support for EAI.

3) Getting it all to work with Netscape.

4) Getting it to work with the Polhemus Fastrak 3d, or a Joystick.


(updated 19 June 2000 - john.stewart@crc.ca)
(updated 31 Aug 2000 - remi@cohen-scali.com)
(updated 02 Apr 2001 - john.stewart@crc.ca)


===================================================================
1) Building FreeWRL as a standalone executable.

Notes:	All files are available here: 

		- http://www.crc.ca/FreeWRL/download/
		- http://freewrl.sourceforge.net/

	You can also access the cvs repository. The way to do it is
	explained at:

		- http://sourceforge.net/cvs/?group_id=9120

	or browse it online at:

		- http://cvs.sourceforge.net/cgi-bin/cvsweb.cgi/freewrl/?cvsroot=freewrl

	Nightly CVS tarballs (for risky of you) are available at:

		- http://www.rcsnet.net/pub/FreeWRL-Nightly-CVS-Tree-Tarball/

	The tests directory has a README in it - it describes the
 	tests available. RUN THEM ALL - Look at the TEST.STATUS file
 	in the tests directory for test results expected.

	
1.1)  OpenGL (usually Mesa)

	TurboLinux:	nothing needed.
	Suse 7.1:	rpm -Uvh mesadev.rpm from disk x3d2.	

	Usually, Mesa is included in newer distributions. If not
	installed it is on the distribution disks.

	If you wnt the latest stable release, download it from:

		http://www.mesa3d.org


1.2) 3D hardware accelleration.

	If you have a Linux compatible 3D accel. card, then 
	simply install it, and follow the directions from the 
	manufacturer.

	You will have accellerated OpenGL; just make sure that 
	you point to the correct version of the GL libs in vrm.lconf;

	ldconfig -p | grep GL

	will show you which versions of the (mesa) GL library
	you have.


1.3) FreeWRL Installation.

	This section has specifics for certain distributions.
	check at the bottom of this section for these dists.

	TurboLinux:	Perform step 1: below.
			change the two references in vrml.conf
			from:
				-lGL -lGLU

			To:
				-lMesaGL -lMesaGLU

			and go to the next section.

	Suse 7.1:	Perform steps 1, 4, and 5 below.
			I had to install
		                Digest-MD5-2.09
		                MIME-Base64-2.11
		                URI-1.04
		                libnet-1.0607
		                HTML-Parser-2.25
		                libwww-perl-5.47
			and had to find ImageMagick. It most likely
			was not installed because I had to restrict
			packages on my installation.

		

	1) grab the latest FreeWRL tar file, and untar it.

	2) Verify that the vrml.conf file have the good reference
	to the following libraries:
		- GL and GLU
		- PNG
		- JPEG

	3) install the FreeType RPMs if needed.
	(freetype-1.3.x, freetype-devel-1.3.x, freetype-utils-1.3.x)

	4) required Perl Modules:

		Digest-MD5-2.09
		HTML-Parser-2.25	
		MIME-Base64-2.11
		URI-1.04
		libnet-1.0607
		libwww-perl-5.47
		Image-Base-1.07

	Installing these modules is a no-brainer; just untar
	each module, then go into the directory, and 

		perl Makefile.PL
		make
		make install

	Note that libwww-perl will most likely ask you if you
	want to reconfigure- I always just select the default (no)

	5) ImageMagick is required for some conversions of graphics
	files. The "convert" utility is used; this *should* now be
	installed with any graphical Linux distribution. If you
	can't find it, you can always download it from:

		http://www.imagemagick.org

1.4) Make the Makefile 

	This has three major steps; execute these commands:
	
		perl Makefile.PL
		cd JS/js
		make
		cd ..
		perl Makefile.PL

	The last few lines of the last command should be:
		Warning: -Ljs/Linux_All_DBG.OBJ changed to (something)
		Writing Makefile for VRML::JS
		Writing Makefile for VRML::OpenGL
		Writing Makefile for VRML::PNG
		Writing Makefile for VRML::Text
		Writing Makefile for VRML::VRMLFunc


1.5) Build/install freewrl

	make install

1.6) SAI is in beta; some of the SAI tests in the tests directory
	work. To make them function on your system; type the following two
	commands:

       		mknod .javapipej p
       		mknod .javapipep p

	Please READ the README's in the SAI tests directories for
	further instructions.


1.7) Do tests of all of the numbered files (And any others that
	you want!) in the tests directory. Note that some use javascript,
	so you will be testing javascript, too. 


===================================================================
2) Installing Java support.

2.1) Javascript:

In the basic install, you should have installed the java support
to allow some of the test programs in the tests directory to work.
(eg, 7.wrl, 8.wrl, and 10.wrl)

If these programs don't run, then go back and make FreeWRL
it so that it does work.

2.2) EAI code:

Make sure that the CLASSPATH environment variable is set
correctly (see above).

On my system, (RH6.2) it is:

[luigi@meson ~]$ setenv | grep CLASSPATH
CLASSPATH=/usr/local/src/VRML/FreeWRL/java/classes:/usr/lib/netscape:

Any java code that uses the "import vrml.external..." command, will
get the requsite classes from this directory.


2.3) Testing the EAI code.

cd into the tests/AddRemove directory in the build tree.

run the script "standalone" in there.

NOTE: The appletviewer should be set to allow network access.
I have my appletviewer set so that network access is only on
the Applet Host. Class access is set to Restricted.

NOTE: RH6.2 does not seem to have the appletviewer installed
by default - have a look at the file via netscape (see below)


===================================================================
4) Getting it all to work with Netscape.

4.1) get XSwallow, Build it according to the directions.

	http://www.csn.ul.ie/~caolan/docs/Xswallow.html

4.2) I HAD to remove the .netscape/plugins and the .netscape/plugins.BAK
files in the non-root accounts that I wished to use. Then, within
netscape, the "Edit" "Preferences" "Navigator" Applications" showed me
using Embedded Vrml   Plugin XSwallow Ver 1.

4.3) point netscape to one of the test files on the local machine;
eg, test/1.wrl in the distribution directory is fine.

4.4) to test EAI with netscape, open the html file in the 
tests/AddRemove directory. 


4.5) Configuration files of importance:

To get it to really swallow the file once it was working, I changed
the line shown belowin my ~/.netscape/xswallow.conf:

x-world/x-vrml;  vr,wrl;         /usr/local/bin/dispatch-vrml-c 
		%s %u %w %h; "FreeWRL" ;  Embedded Vrml

(all on one line)


And, because some web pages serve up VRML files as MIME type
world/vrml, I added the line:


model/vrml;  wrl;                /usr/local/bin/dispatch-vrml-c 
             %s %u %w %h; "FreeWRL" ;  Embedded Vrml Model

(again, all on one line)


And, in /usr/local/bin/dispatch-vrml-c, I changed the stock
XSwallow distribution to invoke freewrl as a vrml 2.0 format:

exec /usr/local/src/VRML/freewrl -eai localhost:2000  
	"$2" 2>/tmp/free.2 >/tmp/free.1 -best

(again, all on one line)

===================================================================

5.0) Getting it to work with external sensors.


5.1) Joystick - It works!!! I have "tied" it to ground use
only, though.

http://www.crc.ca/FreeWRL/download/joystickxxx.




5.2) Polhemus/Virtual Research goggles with position sensor.

5.2.1) Polhemus Position Sensor.

	- Untar and compile the code in the Polhemus1.0.tar file.

	- run minicom (with modem init strings set to null) and see
	  if you can get any input. 

	- allign the Fastrak. I use the A0 command, as found in 
	  the manual, to do the allignment. ("Enhanced Allignment
	  Procedure, pg 48a of my manual - Sept 1998)

		eg:
		(in minicom)
		A0
		P
		(now, move the sensor 24" in positive X axis)
		P
		(now, move the sensor 24" in positive Y axis)
		P

		Exit minicom



	- run the program Polhemus/termite to get the polhemus interface
	  code working. Note - headset should be pointed at where you
	  want "front" to be.

5.2.2) Virtual Research goggles

	- I use a Monster 3dfx card, with Mesa. I send the mesa output
	  directly to the 3dfx card, so there is no VRML display on my
	  X display. Simply connect the goggles to the output of the
	  3dfx card.

	- I start up FreeWRL with the options "-best" and i"-geom 640x480"
	  I should check to see if the geometry matches the Virtual
	  Research goggle display - but it appears to work ok.




#
# $Log: INSTALL,v $
# Revision 1.6  2001/04/03 14:53:45  crc_canada
# update standalone install
#
# Revision 1.4  2000/11/03 20:11:29  crc_canada
# add text about speeding up 3dfx cards
#
# Revision 1.3  2000/09/01 00:15:34  rcoscali
# Add cvs tags to trace changes
#
#
