
# VRMLFunc.pm, generated by VRMLC.pm. DO NOT MODIFY, MODIFY VRMLC.pm INSTEAD
package VRML::VRMLFunc;
require DynaLoader;
@ISA=DynaLoader;
bootstrap VRML::VRMLFunc;
sub load_data {
	my $n = \%VRML::CNodes;
 {
		my $s = '';
		my $v = get_Background_offsets($s);
		@{$n->{Background}{Offs}}{"__data_back","skyAngle","leftUrl","__x_right","frontUrl","__x_top","__depth_right","__data_bottom","set_bind","groundColor","__y_top","__x_front","__x_back","__depth_front","__x_bottom","__depth_back","__data_top","__data_right","__y_left","groundAngle","__y_bottom","__data_front","__data_left","topUrl","__y_right","isBound","__depth_top","skyColor","backUrl","__x_left","__depth_bottom","__y_back","__y_front","rightUrl","__depth_left","bottomUrl","bindTime","_end_"} =
			unpack("i*",$s);
		$n->{Background}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Box_offsets($s);
		@{$n->{Box}{Offs}}{"size","_end_"} =
			unpack("i*",$s);
		$n->{Box}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_PointSet_offsets($s);
		@{$n->{PointSet}{Offs}}{"coord","color","_end_"} =
			unpack("i*",$s);
		$n->{PointSet}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Switch_offsets($s);
		@{$n->{Switch}{Offs}}{"whichChoice","choice","_end_"} =
			unpack("i*",$s);
		$n->{Switch}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Cone_offsets($s);
		@{$n->{Cone}{Offs}}{"height","side","bottom","bottomRadius","_end_"} =
			unpack("i*",$s);
		$n->{Cone}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Coordinate_offsets($s);
		@{$n->{Coordinate}{Offs}}{"point","_end_"} =
			unpack("i*",$s);
		$n->{Coordinate}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Collision_offsets($s);
		@{$n->{Collision}{Offs}}{"collide","children","_end_"} =
			unpack("i*",$s);
		$n->{Collision}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_ImageTexture_offsets($s);
		@{$n->{ImageTexture}{Offs}}{"url","__depth","__data","repeatS","__x","repeatT","__y","_end_"} =
			unpack("i*",$s);
		$n->{ImageTexture}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Sphere_offsets($s);
		@{$n->{Sphere}{Offs}}{"radius","_end_"} =
			unpack("i*",$s);
		$n->{Sphere}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Color_offsets($s);
		@{$n->{Color}{Offs}}{"color","_end_"} =
			unpack("i*",$s);
		$n->{Color}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Normal_offsets($s);
		@{$n->{Normal}{Offs}}{"vector","_end_"} =
			unpack("i*",$s);
		$n->{Normal}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Viewpoint_offsets($s);
		@{$n->{Viewpoint}{Offs}}{"description","fieldOfView","position","bindTime","set_bind","isBound","orientation","jump","_end_"} =
			unpack("i*",$s);
		$n->{Viewpoint}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_DirectionalLight_offsets($s);
		@{$n->{DirectionalLight}{Offs}}{"ambientIntensity","intensity","on","direction","color","_end_"} =
			unpack("i*",$s);
		$n->{DirectionalLight}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Text_offsets($s);
		@{$n->{Text}{Offs}}{"string","__rendersub","length","fontStyle","maxExtent","_end_"} =
			unpack("i*",$s);
		$n->{Text}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Transform_offsets($s);
		@{$n->{Transform}{Offs}}{"rotation","bboxCenter","children","bboxSize","scale","translation","scaleOrientation","center","_end_"} =
			unpack("i*",$s);
		$n->{Transform}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Anchor_offsets($s);
		@{$n->{Anchor}{Offs}}{"url","description","bboxCenter","children","bboxSize","parameter","_end_"} =
			unpack("i*",$s);
		$n->{Anchor}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_ProximitySensor_offsets($s);
		@{$n->{ProximitySensor}{Offs}}{"orientation_changed","__hit","isActive","enterTime","position_changed","enabled","__t1","size","exitTime","__t2","center","_end_"} =
			unpack("i*",$s);
		$n->{ProximitySensor}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Appearance_offsets($s);
		@{$n->{Appearance}{Offs}}{"texture","material","textureTransform","_end_"} =
			unpack("i*",$s);
		$n->{Appearance}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Shape_offsets($s);
		@{$n->{Shape}{Offs}}{"appearance","geometry","_end_"} =
			unpack("i*",$s);
		$n->{Shape}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_TextureTransform_offsets($s);
		@{$n->{TextureTransform}{Offs}}{"rotation","scale","center","translation","_end_"} =
			unpack("i*",$s);
		$n->{TextureTransform}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_SpotLight_offsets($s);
		@{$n->{SpotLight}{Offs}}{"ambientIntensity","attenuation","location","on","intensity","direction","radius","cutOffAngle","beamWidth","color","_end_"} =
			unpack("i*",$s);
		$n->{SpotLight}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_PixelTexture_offsets($s);
		@{$n->{PixelTexture}{Offs}}{"__depth","__data","repeatS","__x","repeatT","__y","image","_end_"} =
			unpack("i*",$s);
		$n->{PixelTexture}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_PointLight_offsets($s);
		@{$n->{PointLight}{Offs}}{"ambientIntensity","attenuation","location","on","intensity","direction","radius","color","_end_"} =
			unpack("i*",$s);
		$n->{PointLight}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Group_offsets($s);
		@{$n->{Group}{Offs}}{"bboxCenter","children","bboxSize","_end_"} =
			unpack("i*",$s);
		$n->{Group}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_TextureCoordinate_offsets($s);
		@{$n->{TextureCoordinate}{Offs}}{"point","_end_"} =
			unpack("i*",$s);
		$n->{TextureCoordinate}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Billboard_offsets($s);
		@{$n->{Billboard}{Offs}}{"axisOfRotation","bboxCenter","children","bboxSize","_end_"} =
			unpack("i*",$s);
		$n->{Billboard}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Material_offsets($s);
		@{$n->{Material}{Offs}}{"ambientIntensity","shininess","emissiveColor","transparency","specularColor","diffuseColor","_end_"} =
			unpack("i*",$s);
		$n->{Material}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_IndexedFaceSet_offsets($s);
		@{$n->{IndexedFaceSet}{Offs}}{"coord","normal","normalIndex","solid","coordIndex","texCoordIndex","colorPerVertex","colorIndex","texCoord","convex","creaseAngle","color","ccw","_end_"} =
			unpack("i*",$s);
		$n->{IndexedFaceSet}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_LOD_offsets($s);
		@{$n->{LOD}{Offs}}{"level","range","center","_end_"} =
			unpack("i*",$s);
		$n->{LOD}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Cylinder_offsets($s);
		@{$n->{Cylinder}{Offs}}{"height","side","bottom","top","radius","_end_"} =
			unpack("i*",$s);
		$n->{Cylinder}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_FontStyle_offsets($s);
		@{$n->{FontStyle}{Offs}}{"style","horizontal","language","spacing","justify","leftToRight","size","family","topToBottom","_end_"} =
			unpack("i*",$s);
		$n->{FontStyle}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_ElevationGrid_offsets($s);
		@{$n->{ElevationGrid}{Offs}}{"normal","zDimension","solid","normalPerVertex","height","colorPerVertex","xSpacing","zSpacing","creaseAngle","xDimension","color","_end_"} =
			unpack("i*",$s);
		$n->{ElevationGrid}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_IndexedLineSet_offsets($s);
		@{$n->{IndexedLineSet}{Offs}}{"coord","colorIndex","colorPerVertex","coordIndex","color","_end_"} =
			unpack("i*",$s);
		$n->{IndexedLineSet}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Extrusion_offsets($s);
		@{$n->{Extrusion}{Offs}}{"endCap","crossSection","beginCap","solid","spine","scale","orientation","convex","creaseAngle","ccw","_end_"} =
			unpack("i*",$s);
		$n->{Extrusion}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_NavigationInfo_offsets($s);
		@{$n->{NavigationInfo}{Offs}}{"visibilityLimit","avatarSize","headlight","bindTime","set_bind","speed","isBound","type","_end_"} =
			unpack("i*",$s);
		$n->{NavigationInfo}{Virt} = $v;
 }
	
}
