EAI internals.

FreeWRL has a server (VRMLServ.pm) that is started up on a
specified port, by the inclusion of a command-line argument.

eg:


freewrl --eai root.wrl &


On OSX you may also specify the port number using the flag --eaiport

eg:

freewrl --eai --eaiport 2004 root.wrl &

Note that in this case, you must specify the non-default port when accessing a browser using Browser.getBrowser()

eg:

Browser.getBrowser(this, 2004);
for eai on port 2004 

Conversely, the Client is started in linux:

EAI=../../java/classes
appletviewer -J-classpath -J$EAI -J-Djava.security.policy="$EAI/java.policy" add-remove1.html

And, under OSX: 

EAI=/Library/Perl/5.8.6/darwin-thread-multi-2level/VRML
appletviewer -J-classpath -J$EAI -J-Djava.security.policy="$EAI/java.policy" add-remove1.html

There are two types of EAI interaction:

1) Commands that are sent from the client to the server;
2) Asynchronous commands are sent from the Server to
   the client, without prompting.

All command strings, data, etc, are string based. The communication
happens through port 2000, or through the port specified using the
--eaiport option on OSX. 

EAI commands can be observed by passing FreeWRL the eai
option on the command line: eg:

freewrl --eai root.wrl eai &

The number of commands used is small; using the AddRemove
test as an example, we have the following sequence. The
AddRemove program gets a reference to the scenegraph of
a null scene; it sends in a shape for parsing, and it
then adds or removes the shape to the scene graph.

Step 1: Get the reference to the Scenegraph.  "ROOT" is
defined as:

DEF ROOT Group {}


	EAI input:
	....1....
	....GN ROOT....
	.. finished

Two lines were sent; the first was a sequence number, the
second a command, GN (get node).

A node reference would be returned as a string.


Step 2: Send in a bit of VRML for parsing: the following is
a PROTO definition and invocation:


	EAI input:
	....2....
	....CVS PROTO button [ field SFFloat PRSize 1.0 field SFColor PRColor 1 0 0] ....
	....{ Shape { geometry Sphere { radius IS PRSize} ....
	....appearance Appearance { material  Material { diffuseColor IS PRColor } } } } ....
	....button {PRSize 0.2}....
	........
	....EOT....
	.. finished

A node reference would be returned as a string.


Step 3: When the user clicks the "AddNode" button in the appletviewer,
the following two commands will be sent:


	EAI input:
	....3....
	....SC VRML::Node=HASH(0x8764cb4) addChildren....
	....VRML::Node=HASH(0x8838dfc)....
	.. finished

The above tells FreeWRL to add a Child (SC = SendChild) to the
rootnode, field addChildren. The second line is the child node.
Both of these are string node references; they are converted
internally into an object format.

	EAI input:
	....4....
	....UR VRML::Node=HASH(0x8764cb4) addChildren....
	....VRML::Node=HASH(0x8838dfc)....
	.. finished

The UR command (Update Routing) tells FreeWRL to re-do the routing
events, possibly with events defined within the child.



