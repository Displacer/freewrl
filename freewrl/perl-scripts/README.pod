
=head1 Perl Scripts in VRML 97/2.0, using FreeWRL 

This file contains some information on perl scripting in vrml 97/2.0
code and examples. As of today, 2000/10/05, they work with
CVS L<freewrl|REFERENCES>. They should work with
freewrl-0.27 when it gets out.

Also it is explained L<below|freewrl 0.26> how to have scripts work
with freewrl-0.26.

=head1 Enabling perl scripting

By default, freewrl does not allow perl scripts in vrml code. Use the
-ps option to enable them :

  freewrl -ps vrml_with_perl.wrl

=head1 Example perl script node

  1   DEF PS Script {
  2     eventIn  SFTime   touch_function
  3     eventOut SFColor  col
  4     field    SFInt32  state 0
  5     field    SFColor  col1  0.0 0.8 0.0
  6     field    SFColor  col2  0.0 0.0 0.8
  7     url [
  8       "perl:
  9        touch_function => sub {
 10 
 11             $state ^= 1 ;   
 12 
 13                 # Set the eventOut 'col'
 14             $col = $state ? $col2 : $col1 ;
 15         [];
 16       },
 17       "
 18     ]
 19   }

Line  1     : The C<DEF PS> is used so that the node can be referred to
later as C<PS>.

Lines 2, 9  : When an C<eventIn> C<'touch_function'> is received,
the sub defined in the C<url> field will be called.

Lines 3, 14 : A variable C<$col> will be defined in the C<url> field. When
C<$col> is set, an C<eventOut> is emitted by the C<Script> node.

Lines 4-6   : Variables C<$state>, C<$col1> and C<$col2> will be defined
in the in the C<url> field.

Line 7      : The C<url> field of the C<Script> node consists of a
list of urls.

Lines 8-17  : VRML string containing the perl code.

Line 8      : Specify the script language : perl.

Lines 9-17  : This string will be C<eval>'ed and will return a ref to 
hash with a key C<touch_function> whose value is the (ref to the) sub
that will be called when a C<'touch_function'> C<eventIn> is
received. This function toggles the C<$state> variable and sends a
C<col> C<eventOut>.

This code is modified from F<simple-1.wrl>.


=head1 Script in PROTO node

I prefer to put scripts in C<PROTO> nodes, for modularity. 

The following complete example (from F<simple-2.wrl>) implements a
sphere that changes color when clicked upon

  1 #VRML V2.0 utf8
  2 
  3 PROTO ClickSphere [
  4   eventIn  SFColor  the_color   
  5   eventOut SFTime   touched 
  6 ] {
  7   Transform {
  8     children [
  9       TouchSensor { touchTime IS touched }
 10       
 11       Shape { 
 12         appearance Appearance {material Material {diffuseColor IS the_color}}
 13         geometry Sphere { }
 14       }
 15     ]
 16   }
 17 }
 18 
 19 PROTO ToggleSphere [
 20 ] {
 21     Group {
 22         children [    
 23             
 24             DEF TS ClickSphere { }
 25 
 26             DEF PS Script {
 27                 eventIn  SFTime   touch_function
 28                 eventOut SFColor  col
 29                 url [
 30                     "perl:
 31                     touch_function => sub {
 32                         
 33                         $col = [ rand(), rand(), rand()];
 34                         [];
 35                     },
 36                     initialize => sub {
 37                         $col = [ rand(), rand(), rand()];
 38                         [];
 39                     }"
 40                 ]
 41             }
 42         ]
 43         ROUTE TS.touched TO PS.touch_function
 44         ROUTE PS.col     TO TS.the_color
 45     }
 46 }
 47 
 48 ToggleSphere { }

Lines  3-17 : Define a C<PROTO ClickSphere> of a colored sphere that
sends an C<eventOut> when it is clicked upon. Its color can be set
through the C<the_color eventIn>.

Lines 19-46 : Define the C<PROTO ToggleSphere> of a sphere that
changes colors when clicked upon.

Line 24     : The C<ClickSphere> that will emit C<"touched"> events and
accept C<"the_color"> events.

Lines 26-42 : The perl script node, a simplified version of the
L<first example|Example perl script node> The color is randomly
chosen.

Lines 43,44 : Route the events from the C<ClickSphere> to the
C<Script> nodes

Line 48     : An instance of the C<ToggleSphere> node.

=head1 freewrl 0.26

freewrl 0.26 supports perl scripting too. However, the C<field>s and
C<eventOut>s, e.g. C<col>, C<state>, C<col1> and C<col2>, in the
L<first example|Example perl script node> above, are not visible directly as
perl variables C<$col, $state> etc but through a refhash C<$t> :
C<$t-E<gt>{col}>, C<$t-E<gt>{state}> etc.

=head1 FreeWRL programming

Perl scripting is implemented in the file F<VRMLNodes.pm>. More
information on the internals of FreeWRL can be found in the file
F<ARCHITECTURE> distributed with FreeWRL.

=head1 REFERENCES

FreeWRL home page : http://www.crc.ca/FreeWRL 

CVS tree at SourceForge :
http://cvs.sourceforge.net/cgi-bin/cvsweb.cgi/freewrl/freewrl

VRML 97 Reference :
http://www.vrml.org/technicalinfo/specifications/vrml97/index.htm 

=head1 WARNING

I am no VRML expert. Suggestions welcome to improve/simplify the
present examples and to add new ones.

=head1 AUTHOR - Etienne Grossmann <etienne@isr.ist.utl.pt>

=cut

