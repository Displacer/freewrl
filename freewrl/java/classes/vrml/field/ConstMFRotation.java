//AUTOMATICALLY GENERATED BY genfields.pl.
//DO NOT EDIT!!!!

package vrml.field;
import vrml.*;
import java.util.StringTokenizer;

public class ConstMFRotation extends ConstMField {
    public ConstMFRotation() {
    }

    public ConstMFRotation(float[] rotations) {
        this(rotations.length, rotations);
    }

    public ConstMFRotation(int size, float[] rotations) {
        for (int i = 0; i < size; i += 4)	
            __vect.addElement(new ConstSFRotation(rotations[i], rotations[i+1], rotations[i+2], rotations[i+3]));
    }

    public ConstMFRotation(float[][] rotations) {
        for (int i = 0; i < rotations.length; i++)
            __vect.addElement(new ConstSFRotation(rotations[i][0], rotations[i][1], rotations[i][2], rotations[i][3]));
    }
	
    public void getValue(float[] rotations) {
        __updateRead();
        int size = __vect.size();
        for (int i = 0; i < size; i++) {
            ConstSFRotation sfRotation = (ConstSFRotation) __vect.elementAt(i);
            rotations[4*i+0] = sfRotation.axisX;
            rotations[4*i+1] = sfRotation.axisY;
            rotations[4*i+2] = sfRotation.axisZ;
            rotations[4*i+3] = sfRotation.angle;
        }
    }

    public void getValue(float[][] rotations) {
        __updateRead();
        int size = __vect.size();
        for (int i = 0; i < size; i++)
            ((ConstSFRotation) __vect.elementAt(i)).getValue(rotations[i]);
    }

    public void get1Value(int index, float[] rotations) {
        __update1Read(index);
        ((ConstSFRotation) __vect.elementAt(index)).getValue(rotations);
    }

    public void get1Value(int index, SFRotation sfRotation) {
        __update1Read(index);
        sfRotation.setValue((ConstSFRotation) __vect.elementAt(index));
    }

    public String toString() {
        __updateRead();
        StringBuffer sb = new StringBuffer("[");
        int size = __vect.size();
        for (int i = 0; i < size; i++) {
            if (i > 0) sb.append(", ");
            sb.append(__vect.elementAt(i));
        }
        return sb.append("]").toString();
    }

    public void __fromPerl(String str) {
        __vect.clear();
        StringTokenizer st = new StringTokenizer(str,",");
        while (st.hasMoreTokens()) {
            ConstSFRotation sf = new ConstSFRotation();
            sf.__fromPerl(st.nextToken());
            __vect.addElement(sf);
        }
    }

    public String __toPerl() {
        StringBuffer sb = new StringBuffer("");
        int size = __vect.size();
        for (int i = 0; i < size; i++) {
            if (i > 0) sb.append(",");
            sb.append(((ConstSFRotation) __vect.elementAt(i)).__toPerl());
        }
        return sb.append("").toString();
    }
}