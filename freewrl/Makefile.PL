# Copyright (C) 1998 Tuomas J. Lukka 1999, 2005, John Stewart CRC Canada.
# DISTRIBUTED WITH NO WARRANTY, EXPRESS OR IMPLIED.
# See the GNU Library General Public License (file COPYING in the distribution)
# for conditions of use and redistribution.

# what OS are we running under?
my $OS = `uname`;

# remove whitespace at beginning and end.
$OS =~ s/\s+$//;
$OS =~ s/^\s+//;

if ($OS eq "Darwin") {
	print "This install is running on an Apple OS X computer\n";
} elsif ($OS eq "Linux") {
	print "This install is running on a Linux based computer\n";
} elsif ($OS eq "IRIX64") {
	print "This install is running on an Irix computer\n";
} elsif ($OS eq "SunOS") {
	print "This install is running on a Linux based computer\n";
} else {
	print "The uname command returned $OS - dont know what platform - assuming Linux\n";
}



# create the VRMLFunc.pm module
system "perl VRMLC.pm";

my $VERSION = "V1.14-pre4";

BEGIN {
 eval "use 5.004";
 warn "VRML::Browser requires Perl v5.0.4 or later -- go to http://www.perl.com"
  if $@;
}

use Cwd qw(getcwd chdir);

# Remove our config argument
@ARGV = map {
	if(/^CONF=(.*)$/) {
		$vrml_conf_file = $1; ();
		print "warning - vrml.conf argument not supported\n";
	} else {
		$_
	}
} @ARGV;

@ARGV = map {
	if(/^PPREFIX=(.*)$/) {
		$PPREFIX = $1; ();
	} else {
		$_
	}
} @ARGV;

# get the VRML.conf file.
if ($OS eq "Darwin") {
	require './vrml.conf.aqua';
} elsif ($OS eq "IRIX64") {
	require './vrml.conf.irix';
} elsif ($OS eq "SunOS") {
	require './vrml.conf.sunGcc';
} else {
	# assume a Linux computer.
	my $ARCH = `arch`;

	# remove whitespace at beginning and end.
	$ARCH =~ s/\s+$//;
	$ARCH =~ s/^\s+//;

	if ($ARCH eq "x86_64") {
		# 64 bit architecture.
		require './vrml.conf.x86_64';
	} else {
		# standard 32 bit architecture
		require './vrml.conf';
	}
}
$VRML_CONFIG{VERSION} = $VERSION;

print STDERR "\nCreating platform specific INC, LIBS, DEFINE based on vrml.conf.\n";

## Handle platform-specific compile options for the Javascript engine
## and others specific to FreeWRL.

my $sitearchjsdir = "\$(INSTALLPRIVLIB)/auto/VRML/JS";

my $jsdir = "js1.5/src";
my $jsobjdir;
my $BUILD_OPT;

my $warnings_high = qq{-Wunreachable-code -Wshadow -Wcast-align};
my $warnings_medium = qq{-W -Wpointer-arith -Wconversion -Wbad-function-cast -Wcast-qual -Wfloat-equal};
my $warnings_low = qq{-Wall -Wundef -Wsign-compare -Wmissing-prototypes -Wmissing-declarations};

my @ccflags;
my @inc;
my @libs;
my @ldflags;
my @jsinc;
my @jslibs;


if ($OS eq  "IRIX64") {
	$jsobjdir = "$jsdir/IRIX6.5";
} elsif ($OS eq "Darwin") {
	$jsobjdir = "$jsdir/Darwin";
} elsif ($OS eq "SunOS") {
	$jsobjdir = "$jsdir/SunOS5.8";
} else { ## linux used by default
	$jsobjdir = "$jsdir/Linux_All";
}

if ($VRML_CONFIG{DEBUG} eq "on") {
	$jsobjdir .= "_DBG.OBJ";
	$BUILD_OPT = 0;
} else {
	$jsobjdir .= "_OPT.OBJ";
	$BUILD_OPT = 1;
}

# is this an update of an older build? Some files have moved.
my $oldfw2initpl = $VRML_CONFIG{BIN_DIR}."/fw2init.pl";
print "checking for $oldfw2initpl\n";
if (-e $oldfw2initpl) {
	print "***************************************************************************\n";
	print "There is an old file that should be removed by hand: $oldfw2initpl\n";
	print "***************************************************************************\n";
}


if ($VRML_CONFIG{WARNINGS} eq "low") { push @ccflags, $warnings_low; }
if ($VRML_CONFIG{WARNINGS} eq "medium") { push @ccflags, $warnings_low, $warnings_medium; }

if ($VRML_CONFIG{WARNINGS} eq "high") { push @ccflags, $warnings_low, $warnings_medium, $warnings_high; }

if ($VRML_CONFIG{BOUNDS_CHECK} eq "on") {
	print "MAKING WITH BOUNDSCHECKING ENABLED\n";
	push @inc, "-fbounds-checking";
	push @ldflags, "-L$VRML_CONFIG{LIBCHECK_INST}";
	push @libs, "-L$VRML_CONFIG{LIBCHECK_INST}";
}

push @inc, $VRML_CONFIG{FREEWRL_INC},
	"-I../JS/$jsobjdir", "-IJS/$jsobjdir", "-IJS/$jsdir", "-I../JS/$jsdir -ICFuncs";
push @libs, $VRML_CONFIG{FREEWRL_LIBS}, "-L../JS/$jsobjdir", "-LJS/$jsobjdir", "-Lblib/arch/auto/VRML/VRMLFunc/", "-ljs";
push @ldflags, $VRML_CONFIG{LDFLAGS}, "-LJS/$jsobjdir", "-Lblib/arch/auto/VRML/VRMLFunc/";

# push build directory, for running standalone

$VRML_CONFIG{FREEWRL_CCFLAGS} = join(' ', @ccflags);
$VRML_CONFIG{FREEWRL_INC} = join(' ', @inc);
$VRML_CONFIG{FREEWRL_LIBS} = join(' ', @libs);
$VRML_CONFIG{LDFLAGS} = join(' ', @ldflags);
$VRML_CONFIG{LIBJS_INST} = $sitearchjsdir;

# write the Config.pm file.
print STDERR "Writing Config.pm\n";
open OUT, ">Config.pm" or die("Couldn't write to Config.pm");
print OUT "# AUTOMATICALLY GENERATED BY TOP-LEVEL MAKEFILE.PL -- DO NOT EDIT\n\n\n";
print OUT "package VRML::Config;\n\n";

print OUT "\%vrml_config = (\n";

for (keys %VRML_CONFIG) {
	print OUT "\t$_\t=>\t";
	if(defined $VRML_CONFIG{$_}) {
                print OUT '"',quotemeta($VRML_CONFIG{$_}),'"';
	} else {
		print OUT "undef";
	}
	print OUT ",\n";
}

print OUT ");\n\n";
chomp ($pwd = getcwd());
print OUT qq(\$VRML::ENV{FREEWRL_BUILDDIR} = "$pwd";\n\n);
print OUT "1;\n";
close OUT;

# print out the CFuncs/vrmlconf.c C header file.
print STDERR "Writing CFuncs/vrmlconf.h\n";
open OUT, ">CFuncs/vrmlconf.h" or die("Couldn't write to CFuncs/vrmlconf.h");
print OUT "/* AUTOMATICALLY GENERATED BY TOP-LEVEL MAKEFILE.PL -- DO NOT EDIT */\n\n\n";

# is this building on a Darwin/OSX machine? if so, lets define AQUA.
if ($OS eq "Darwin") {
	print OUT "#define AQUA\n";
}

# lets write some generated #defines.
print OUT "#define BUILDDIR \"$pwd\"\n";
print OUT "#define FWVER \"",$VERSION,"\"\n";
print OUT "#define XMESSAGE \"",$VRML_CONFIG{BIN_DIR},"/FreeWRL_Message\"\n";
print OUT "#define SOUNDSERVERBINARY \"",$VRML_CONFIG{BIN_DIR},"/FreeWRL_SoundServer\"\n";

# lets just dump out some standard defines, from the vrml.conf file.
my @dumpToVRMLCONF = (
	"BROWSER",
	"SOUNDCONV",
	"ASCIITERM",
	"UNZIP",
	"WGET",
	"CONVERT",
	"COPIER",
	"JAVA");

foreach (@dumpToVRMLCONF) {
	if (defined $VRML_CONFIG{$_}) {
		if (!(-e $VRML_CONFIG{$_})) {
			print "WARNING: Check your specific vrml.conf file; can not find system executable ".
				$VRML_CONFIG{$_}." for identifier $_\n";
		}
		print OUT "#define\t$_\t\t";
                print OUT '"',$VRML_CONFIG{$_},'"';
 	} else {
		print OUT "#define\t$_\t\t";
		print OUT '"',"$_"."ISNOTDEFINED",'"';
 	}
 	print OUT "\n";
}
close OUT;


# make the xs_init.c file We seem to need to do this for OS X
# and copy over other makefiles as required.
if ($OS eq "Darwin") {
	`perl -MExtUtils::Embed -e xsinit -- -o - >CFuncs/perlxsi.c` ;
	`cp JS/Makefile.aqua.PL JS/Makefile.PL`;
	`cp FreeWRL_Message/Makefile.aqua FreeWRL_Message/Makefile`;
}

## make the Javascript libraries if needed

print STDERR "Checking for the Mozilla JavaScript Reference library and application.\n";

if (-e "JS/$jsobjdir/libjs.a" && -e "JS/$jsobjdir/libjs.so" && -e "JS/$jsobjdir/js") {
    print STDERR "The Javascript library and application were found.\n";
} else {
    print STDERR "The Javascript library and application were not found - make them.\n";

    chdir("JS/$jsdir");
    system("make -f Makefile.ref BUILD_OPT=$BUILD_OPT");
    chdir($pwd);
}

print "Done, now doing writeMakefile\n";

use ExtUtils::MakeMaker;
require './Config.pm';

WriteMakefile(
			  NAME => "VRML::VRMLFunc",
			  DISTNAME => "FreeWRL",
			  dist => {
					   COMPRESS => 'gzip -9',
					   SUFFIX => 'gz',
					  },
			  dynamic_lib => {
							  OTHERLDFLAGS => $VRML::Config::vrml_config{LDFLAGS},
							  LDDLFLAGS => $VRML::Config::vrml_config{LDDLFLAGS}
							 },
			  DEFINE => $VRML::Config::vrml_config{FREEWRL_DEFINE},
			  INC => $VRML::Config::vrml_config{FREEWRL_INC},
			  EXE_FILES => ['freewrl'],
			  MAN1PODS => { freewrl => '$(INST_MAN1DIR)/freewrl.$(MAN1EXT)' },
			  PL_FILES => {'freewrl.PL' => 'freewrl'},
			  PREREQ_PM => {
							'File::Basename' =>  "0", # any version will do
						   },
			  LIBS => $VRML::Config::vrml_config{FREEWRL_LIBS},
			  OBJECT => 'VRMLFunc.o',
);

{

	package MY;

	sub post_constants {
		my $post_const = join(
							  "\n",
							  qq{\nvpath %.c .:./CFuncs},
							  qq{vpath %.o .:./CFuncs\n},
							  qq{CFUNCS_SRC:=\$(wildcard ./CFuncs/*.c)},
							  qq{OBJECT+=\$(CFUNCS_SRC:%c=%o)}
							 );

		return $post_const;
	}

	sub const_loadlibs {
		my $loadlibs = shift->SUPER::const_loadlibs(@_);
		$loadlibs =~ s/(LD_RUN_PATH\s*=.*)$/$1:$VRML::Config::vrml_config{LIBJS_INST}/m;
		# print "Makefile.PL - loadlibs $loadlibs\n";
		return $loadlibs;
	}

	sub dynamic_lib {
		if ($OS eq "Darwin") {
			return "ARMAYBE = :
OTHERLDFLAGS = $VRML::Config::vrml_config{LDFLAGS}
INST_DYNAMIC_DEP =

\$\(INST_DYNAMIC\): \$\(OBJECT\) \$\(MYEXTLIB\) \$\(BOOTSTRAP\) \$\(INST_ARCHAUTODIR\)/.exists \$\(EXPORT_LIST\) \$\(PERL_ARCHIVE\) \$\(PERL_ARCHIVE_AFTER\) \$\(INST_DYNAMIC_DEP\)
	\$\(RM_F\) \$\@
	LD_RUN_PATH=\$\(LD_RUN_PATH\) \$\(LD\) \$\(LDFROM\) \$\(OTHERLDFLAGS\) -o \$\@ \$\(MYEXTLIB\) \$\(PERL_ARCHIVE\) \$\(LDLOADLIBS\) \$\(PERL_ARCHIVE_AFTER\) \$\(EXPORT_LIST\)
	\$\(CHMOD\) \$\(PERM_RWX\) \$\@\n";
		} else {
			return shift->SUPER::dynamic_lib(@_);
		}
	}


	sub post_initialize {
		use Cwd;
		my($ver, $nc);
		my $dir = getcwd();
		my $post_init = "";


		$post_init = join(
			  "\n",
			  qq{\nFRONTEND=$dir/CFrontEnd},
			  qq{\nSOUNDENGINE=$dir/SoundEngine},
			  qq{\nCONSOLEMSG=$dir/FreeWRL_Message},
			  qq{FRONTEND_DIR=$VRML::Config::vrml_config{BIN_DIR}},
			  qq{LIB_DIR=$VRML::Config::vrml_config{LIB_DIR}},
		 );

		return($post_init);
	}



	sub postamble {
		my @postamble;
		my $VRMLINSTDIR   = "\$(DESTINSTALLPRIVLIB)/VRML";
		my $FRONTEND      = "\$(dir)/CFrontEnd";
		my $SOUNDENGINE   = "\$(dir)/SoundEngine";
		my $CONSOLEMSG   = "\$(dir)/FreeWRL_Message";
		my $FRONTEND_DIR  = $VRML::Config::vrml_config{BIN_DIR};
		my $LIB_DIR       = $VRML::Config::vrml_config{LIB_DIR};
		my $MYINC         = $VRML::Config::vrml_config{FREEWRL_INC};
		my $MYLIBS        = $VRML::Config::vrml_config{FREEWRL_LIBS};
		my $MYLDFLAGS     = $VRML::Config::vrml_config{LDFLAGS};

		###################################################
		## Add extra make instructions that don't quite fit into the
		## ExtUtils::MakeMaker framework.
		###################################################

		push(@postamble, join(
				"\n",
				qq{\techo "#define INSTALLDIR \\"\$(DESTINSTALLPRIVLIB)\\"" > CFuncs/installdir.h\n},
				qq{\# --- VRML::VRMLFunc:\n},
				qq{VRMLFunc.pm VRMLFunc.xs: VRMLC.pm VRMLFields.pm VRMLNodes.pm VRMLRend.pm},
				qq{\t\$(PERL) VRMLC.pm\n},
			 ));

		###################################################
		# lets do the install:: targets at this step.
		###################################################
		push(@postamble, join(
			  "\n",
			  qq{install ::},
		));


		if ($OS ne "Darwin") {
			if ($VRML::Config::vrml_config{NETSCAPE_INST}) {
				my $PLOC = $VRML::Config::vrml_config{NETSCAPE_INST};
				my $x1 = $VRML::Config::vrml_config{NETSCAPE_INST};
				push(@postamble, join(
					  "\n",
					  qq{\# --- Mozilla/Netscape Plugin:\n},
					  qq{\t\@cd Plugin && \$(MAKE) install PLUGDIR=\"\$(DESTDIR)$x1\"\n}
				 ));
			}
		}

		if ($VRML::Config::vrml_config{JAVA_INST}) {
			push(@postamble, join(
				  "\n",
				  qq{\# --- Java Archive\n},
				  qq{\t\@cd java && \$(MAKE) install\n}
				 ));
		}

		# Copy fonts over, etc.
		push(@postamble, join(
				  "\n",
				qq{\# copy fonts, libjs.so over\n},
				qq{\tcp -r fonts \$(DESTINSTALLPRIVLIB)/VRML\n},
				qq{\tcp JS/$jsobjdir/libjs.so \$(DESTDIR)$LIB_DIR\n},
				qq{\# copy copy the initialization file over\n},
				qq{\tcp CFrontEnd/fw2init.pl \$(DESTINSTALLPRIVLIB)/VRML\n},
				));
		if ($OS eq "Linux") {
			push(@postamble, join(
				"\n",
				qq{# make the libFreeWRLFunc shared library active\n},
				qq{\tcp blib/arch/auto/VRML/VRMLFunc/VRMLFunc.so \$(DESTDIR)$LIB_DIR/libFreeWRLFunc.so\n},
				qq{\t/sbin/ldconfig\n}
			));
		}
		if ($OS eq "Darwin") {
			push(@postamble, join(
				"\n",
                             qq{\tcp blib/arch/auto/VRML/VRMLFunc/VRMLFunc.bundle $LIB_DIR/libFreeWRLFunc.dylib\n},
                             qq{\tcp blib/arch/auto/VRML/VRMLFunc/VRMLFunc.bundle blib/arch/auto/VRML/VRMLFunc/libFreeWRLFunc.dylib\n},
                                qq{\tcp blib/arch/auto/VRML/VRMLFunc/VRMLFunc.bundle $LIB_DIR/VRMLFunc.bundle\n},
				qq{\tcp freewrl.aquascript /usr/bin/freewrl; chmod 755 /usr/bin/freewrl\n},
			));
		}
		



		# make the C Front End.
		my $def2;
		my $def1 = "OSNAME=\$(OSNAME) PPATH=\$(INSTALLPRIVLIB)/VRML BINDIR=\$(DESTDIR)\$(FRONTEND_DIR) ";
		if ($VRML::Config::vrml_config{BOUNDS_CHECK} eq "on") {
			print "COMPILING WITH BOUNDSCHECKING\n";
			$def2 = "INC=\"$MYINC\" LIBS=\"$MYLIBS\" LDFLAGS=\"$MYLDFLAGS\" BC=\"-lboundscheck\"";
			print "line is $def2\n";
		} else {
			$def2 = "INC=\"$MYINC\" LIBS=\"$MYLIBS\" LDFLAGS=\"$MYLDFLAGS\" BC=\"\"";
		}

		my $def = $def1.$def2;

		# Darwin's front end is either a cocoa app or a carbon app; the front ends are made
		# in a different file. So, in this make, don't make a front end!

		# make the sound engine, console message, and frontend if NOT OSX.
		if ($OS ne "Darwin") {
			if ($VRML::Config::vrml_config{SOUND_ENGINE}) {
			push (@postamble, join("\n",
				  qq{\n\# --- Sound Engine:},
				  qq{\tcd \$(SOUNDENGINE) && \$(MAKE) install $def \n},
			  	  qq{\n\# --- FreeWRL Message Console:},
			  	  qq{\tcd \$(CONSOLEMSG) && \$(MAKE) install $def \n},
				  qq{\n\# --- FreeWRL C Front End:},
				  qq{\tcd \$(FRONTEND) && \$(MAKE) install $def\n},
				 ));
			}
		}

		###################################################
		# lets do the clean:: targets at this step.
		###################################################
		push(@postamble, join(
			  "\n",
			  qq{clean ::},
			  qq{\tcd JS/$jsdir && \$(MAKE) -f Makefile.ref BUILD_OPT=$BUILD_OPT clean\n},
			 ));
		if ($OS ne "Darwin") {
			push(@postamble, join(
			  "\n",
			  qq{\tcd \$(SOUNDENGINE) && \$(MAKE) clean $def \n},
			  qq{\tcd \$(FRONTEND) && \$(MAKE) clean $def\n},
			  qq{\tcd \$(CONSOLEMSG) && \$(MAKE) clean $def \n},
			));
		}

		###################################################
		# lets do the distclean:: targets at this step.
		###################################################
		push(@postamble, join(
			  "\n",
			  qq{distclean :: realclean},
			  qq{\tcd JS/$jsdir && \$(MAKE) -f Makefile.ref BUILD_OPT=$BUILD_OPT clobber},
			 ));
		if ($OS ne "Darwin") {
			push(@postamble, join(
			  "\n",
			  qq{\tcd \$(SOUNDENGINE) && \$(MAKE) clean $def \n},
			  qq{\tcd \$(FRONTEND) && \$(MAKE) clean $def\n},
			  qq{\tcd \$(CONSOLEMSG) && \$(MAKE) clean $def \n},
			));
		}

		###################################################
		# lets do the all:: targets at this step.
		###################################################
		push(@postamble, join(
			  "\n",
			  qq{all::},
			));

		if ($OS eq "Linux") {
			push(@postamble, join(
				"\n",
				#qq{\tcp blib/arch/auto/VRML/VRMLFunc/VRMLFunc.so $LIB_DIR/libFreeWRLFunc.so\n},
				#qq{\t/sbin/ldconfig\n}
				qq{\t\tcp -f blib/arch/auto/VRML/VRMLFunc/VRMLFunc.so blib/arch/auto/VRML/VRMLFunc/libFreeWRLFunc.so\n},
			));
		}
		if ($OS eq "Darwin") {
			push(@postamble, join(
				"\n",
                             qq{\tcp blib/arch/auto/VRML/VRMLFunc/VRMLFunc.bundle $LIB_DIR/libFreeWRLFunc.dylib\n},
                             qq{\tcp blib/arch/auto/VRML/VRMLFunc/VRMLFunc.bundle blib/arch/auto/VRML/VRMLFunc/libFreeWRLFunc.dylib\n},
                             qq{\tcp blib/arch/auto/VRML/VRMLFunc/VRMLFunc.bundle $LIB_DIR/VRMLFunc.bundle\n},
			));
		}

		if ($OS ne "Darwin") {
		push(@postamble, join(
			  "\n",
			  qq{\tcd \$(SOUNDENGINE) && \$(MAKE) all $def \n},
			  qq{\tcd \$(FRONTEND) && \$(MAKE) all $def \n},
			  qq{\tcd \$(CONSOLEMSG) && \$(MAKE) all $def \n},
			 ));
		}

		###################################################
		# lets do the all:: targets at this step.
		###################################################
		 if ($VRML::Config::vrml_config{RPM_PREFIX}) {
			my $RPM_PREFIX = $VRML::Config::vrml_config{RPM_PREFIX};
			my $lib_dir = $VRML::Config::vrml_config{LIB_DIR};
			my $bin_dir = $VRML::Config::vrml_config{BIN_DIR};

			print "\nCongratulations! you have defined the RPM_PREFIX - lets build the rpm make target\n";
			my $sourcepackage = `cat sourcepackage`;
			# remove whitespace at beginning and end of this package name (check packagemaker in CVS tree)
			$sourcepackage =~ s/\s+$//;
			$sourcepackage =~ s/^\s+//;
			my $srcdir = substr($sourcepackage, 0, rindex ($sourcepackage,".tar"));
			my $rpmversion = substr ($srcdir,index($srcdir,"-")+1,100);
			#print "srcdir $srcdirrpmversion $rpmversion sourcepackage $sourcepackage\n";


			# find the OS name. This is version specific. Anyone got a better idea?

			#my $osname = `cat /etc/redhat-release`;
			my $osname = `cat $VRML::Config::vrml_config{RPM_OSNAME_FILE}`;

			# remove and brackets and anything following.
			$osname =~s/\n.*//;
			$osname =~s/\(.*//;
			$osname =~s/ //g;


			if ($osname eq "") {
				print "blank name for OSNAME, check RPM_OSNAME_FILE in vrml.conf. \n";
				$osname = "unknown";
			}
			#print "osname is: $osname\n";

			# make spec file name.
			my $specfile = "$RPM_PREFIX/SPECS/".$srcdir.".".$osname.".spec";
			# print "spec file is $specfile\n";


		push(@postamble, join(
			  "\n",
			  qq{rpm::},
				qq{\t# make the gzip file of the dist.},
				qq{\ttar -cf $RPM_PREFIX/SOURCES/$sourcepackage ..\/$srcdir},
				qq{\trm $RPM_PREFIX/SOURCES/$sourcepackage.gz},
				qq{\tgzip $RPM_PREFIX/SOURCES/$sourcepackage\n},
				qq{\t#make the spec file.},
				qq{\techo \"Summary: A vrml viewer\" > $specfile},
				qq{\techo \"Name: freewrl\" >> $specfile},
				qq{\techo \"Version: $rpmversion\" >> $specfile},
				qq{\techo \"Release: $osname\" >> $specfile},
				qq{\techo \"Copyright: GPL\" >> $specfile},
				qq{\techo \"Group: Applications\/Multimedia\" >> $specfile},
				qq{\techo \"Source0: $sourcepackage.gz\" >> $specfile},
				qq{\techo \"URL: http:\/\/www.crc.ca\/FreeWRL\" >> $specfile},
				qq{\techo \"Distribution: Linux\" >> $specfile},
				qq{\techo \"Vendor: CRC Canada\" >> $specfile},
				qq{\techo \"Packager: Autogenerated, John Stewart, <freewrl-04@rogers.com>\" >> $specfile},
				qq{\techo \"Provides: perl(VRML::Config), perl(VRMLFields), perl(VRMLNodes), perl(VRMLRend), perl(VRML::VRMLCU), perl(VRML::VRMLFields), perl(VRML::VRMLNodes),perl(VRML::Events), perl(VRML::X3DParser)\" >> $specfile},
				qq{\techo \"%define __check_files %{nil} \" >> $specfile},
				qq{\techo \"%description\" >> $specfile},
				qq{\techo \"FreeWRL is an Open Source, cross platform VRML2/X3D compliant browser, with script and EAI support.\" >> $specfile},
				qq{\techo \"The primary platform is Linux.\" >> $specfile},
				qq{\techo \"%prep\" >> $specfile},
				# split the zcat into 2 lines because we need the $RPM_SOURCE_DIR in the rpm spec file...
				qq{\techo -n \"zcat \$\$\" >> $specfile},
				qq{\techo \"RPM_SOURCE_DIR\/$sourcepackage.gz | tar -xvf -\" >> $specfile},
				qq{\techo \"%setup -q\" >> $specfile},
				qq{\techo \"%build\" >> $specfile},
				qq{\techo \"perl Makefile.PL\" >> $specfile},
				qq{\techo \"%install\" >> $specfile},
				qq{\techo \"make install\" >> $specfile},
				qq{\techo \"%post\" >> $specfile},
				qq{\techo \"\/sbin\/ldconfig\" >> $specfile},
				qq{\techo \"%clean\" >> $specfile},
				qq{\techo \"%files\" >> $specfile},
				qq{\techo \"%defattr(-,root,root)\" >> $specfile},
				qq{\techo \"$lib_dir\/libFreeWRLFunc.so\" >> $specfile},
				qq{\techo \"$lib_dir\/libjs.so\" >> $specfile},
				qq{\techo \"$bin_dir\/FreeWRL_Message\" >> $specfile},
				qq{\techo \"$bin_dir\/freewrl\" >> $specfile},
				qq{\techo -n \$(INSTALLSITEARCH) >> $specfile},
				qq{\techo "/VRML" >> $specfile},
				qq{\techo -n \$(DESTINSTALLPRIVLIB) >> $specfile},
				qq{\techo "/VRML" >> $specfile},
				qq{\techo -n \$(INSTALLSITEARCH) >> $specfile},
				qq{\techo "/auto/VRML" >> $specfile},
				qq{\techo -n \$(INSTALLSITEMAN1DIR) >> $specfile},
				qq{\techo -n \"/freewrl.\" >> $specfile},
				qq{\techo \$(MAN1EXT) >> $specfile},
				qq{\techo \"\" >> $specfile},
			));
			if ($VRML::Config::vrml_config{SOUND_ENGINE}) {
			print "RPM - have sound engine\n";
			push(@postamble, join(
			  	"\n",
				qq{\techo \"$bin_dir\/FreeWRL_SoundServer\" >> $specfile},
				));
			}

			if ($VRML::Config::vrml_config{NETSCAPE_INST}) {
			my $nsdir = $VRML::Config::vrml_config{NETSCAPE_INST};
			print "RPM: have Netscape Install Directory.\n";
			push(@postamble, join(
			  	"\n",
				qq{\techo \"$nsdir\/npfreewrl.so\" >> $specfile},
				));
			}

			# now that spec file is written, finish off rpm build commands.
			push(@postamble, join(
			  "\n",
				qq{\t# make the gzip file of the dist.},
				qq{\trpmbuild -ba $specfile},
				qq{\t# move the rpm file to a platform-specific name.},
				));
		}


		return join("\n", @postamble);
	}
}
