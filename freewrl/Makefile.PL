# Copyright (C) 1998 Tuomas J. Lukka 1999, John Stewart CRC Canada.
# DISTRIBUTED WITH NO WARRANTY, EXPRESS OR IMPLIED.
# See the GNU Library General Public License (file COPYING in the distribution)
# for conditions of use and redistribution.

#
# Config system idea from PDL
#

system "perl VRMLC.pm";

$VERSION = "0.40-pre1";

BEGIN {
 eval "use 5.004";
 warn "VRML::Browser requires Perl v5.0.4 or later -- go to http://www.perl.com"
  if $@;
}

use Cwd qw(getcwd chdir);

# Remove our config argument
@ARGV = map {
	if(/^CONF=(.*)$/) {
		$vrml_conf_file = $1; ();
	} else {
		$_
	}
} @ARGV;

if(!defined $vrml_conf_file) {
	my $defname = "$ENV{HOME}/.vrml.conf";
	if(-e $defname) {
		$vrml_conf_file = $defname;
	}
}

require './vrml.conf';
%VRML_CONFIG_DIST = %VRML_CONFIG;

if(defined $vrml_conf_file) {
 if(!-e $vrml_conf_file) {
	die("Invalid config file '$vrml_conf_file' specified");
 }
 print STDERR "\nReading configuration from file '$vrml_conf_file'\n";
 require $vrml_conf_file;
}

for(keys %VRML_CONFIG) {
	if(!exists($VRML_CONFIG_DIST{$_})) {
		die("Invalid key '$_' found in user supplied file '$vrml_conf_file'.
This key may no longer be in use, or someone may have garbled the 'vrml.conf' 
file in the distribution. Please correct and try again");
	}
}

%VRML_CONFIG = (%VRML_CONFIG_DIST, %VRML_CONFIG);


$VRML_CONFIG{VERSION} = $VERSION;


print STDERR "\nCreating platform specific INC, LIBS, DEFINE based on vrml.conf.\n";

## Handle platform-specific compile options for the Javascript engine
## and others specific to FreeWRL.

my $jsdir = "js/src";
my $jsobjdir;
my $BUILD_OPT;

my $warnings_high = qq{-Wunreachable-code -Wshadow -Wcast-align};
my $warnings_medium = qq{-W -Wpointer-arith -Wconversion -Wbad-function-cast -Wcast-qual -Wfloat-equal};
my $warnings_low = qq{-Wall -Wundef -Wsign-compare -Wmissing-prototypes -Wmissing-declarations};

my @ccflags;
my @inc;
my @libs;
my @ldflags;
my @jsinc;
my @jslibs;


if ($VRML_CONFIG{PLATFORM} =~ /irix/i) {
	##$jsobjdir = "js/src/IRIX646.5";
	$jsobjdir = "$jsdir/IRIX6.5";
} elsif ($VRML_CONFIG{PLATFORM} =~ /macosx/i) {
	$jsobjdir = "$jsdir/Darwin6.4";
} else { ## linux used by default
	$jsobjdir = "$jsdir/Linux_All";
}

if ($VRML_CONFIG{DEBUG} eq "on") {
	$jsobjdir .= "_DBG.OBJ";
	$BUILD_OPT = 0;
} else {
	$jsobjdir .= "_OPT.OBJ";
	$BUILD_OPT = 1;
}

if ($VRML_CONFIG{WARNINGS} eq "low") {
	push @ccflags, $warnings_low;
}

if ($VRML_CONFIG{WARNINGS} eq "medium") {
	push @ccflags, $warnings_low, $warnings_medium;
}

if ($VRML_CONFIG{WARNINGS} eq "high") {
	push @ccflags, $warnings_low, $warnings_medium, $warnings_high;
}

if ($VRML_CONFIG{BOUNDS_CHECK} eq "on") {
	push @inc, "-fbounds-checking";
	push @ldflags, "-L$VRML_CONFIG{LIBCHECK_INST}";
	push @libs, "-L$VRML_CONFIG{LIBCHECK_INST}", "-lcheck";
}

push @inc, $VRML_CONFIG{FREEWRL_INC},
	"-I../JS/$jsobjdir", "-IJS/$jsobjdir", "-IJS/$jsdir", "-I../JS/$jsdir -ICFuncs";
push @libs, $VRML_CONFIG{FREEWRL_LIBS}, "-L../JS/$jsobjdir", "-LJS/$jsobjdir", "-ljs";
push @ldflags, $VRML_CONFIG{LDFLAGS}, "-LJS/$jsobjdir";

$VRML_CONFIG{FREEWRL_CCFLAGS} = join(' ', @ccflags);
$VRML_CONFIG{FREEWRL_INC} = join(' ', @inc);
$VRML_CONFIG{FREEWRL_LIBS} = join(' ', @libs);
$VRML_CONFIG{LDFLAGS} = join(' ', @ldflags);

print STDERR "Writing Config.pm\n";
open OUT, ">Config.pm" or die("Couldn't write to Config.pm");
print OUT "# AUTOMATICALLY GENERATED BY TOP-LEVEL MAKEFILE.PL -- DO NOT EDIT
\%VRML::Config = (
";
for (keys %VRML_CONFIG) {
	print OUT "\t$_\t=>\t";
	if(defined $VRML_CONFIG{$_}) {
                print OUT '"',quotemeta($VRML_CONFIG{$_}),'"';
	} else {
		print OUT "undef";
	}
	print OUT ",\n";
}

print OUT ");\n";
chomp ($myconv = `which convert`);
chomp ($myxsltproc = `which xsltproc`);
chomp ($pwd = getcwd());
chomp ($java = `which java`);
print OUT qq(\$VRML::Browser::CONVERT = "$myconv";\n);
print OUT qq(\$VRML::Browser::XSLTPROC = "$myxsltproc";\n);
print OUT qq(\$VRML::ENV{FREEWRL_BUILDDIR} = "$pwd";\n);
print OUT "1;\n";
close OUT;

print STDERR "Note that 'convert' cannot be found\n" unless $myconv ;



## make the Javascript libraries if needed

print STDERR "Checking for the Mozilla JavaScript Reference library and application.\n";

if (-e "JS/$jsobjdir/libjs.a" && -e "JS/$jsobjdir/libjs.so" && -e "JS/$jsobjdir/js") {
    print STDERR "The Javascript library and application were found.\n";
} else {
    print STDERR "The Javascript library and application were not found - make them.\n";
    chdir("JS/$jsdir");
    system("make -f Makefile.ref BUILD_OPT=$BUILD_OPT");
    chdir($pwd);
}


use ExtUtils::MakeMaker;
WriteMakefile(
			  ## OPTIMIZE => "-g",
			  NAME => "VRML::VRMLFunc",
			  DISTNAME => "FreeWRL",
			  dist => {
					   COMPRESS => 'gzip -9',
					   SUFFIX => 'gz',
					  },
			  dynamic_lib => { OTHERLDFLAGS => $VRML_CONFIG{LDFLAGS} },
			  VERSION => $VERSION,
			  DEFINE => $VRML_CONFIG{FREEWRL_DEFINE},
			  INC => $VRML_CONFIG{FREEWRL_INC},
			  EXE_FILES => ['freewrl'],
			  MAN1PODS => { freewrl => '$(INST_MAN1DIR)/freewrl.$(MAN1EXT)' },
			  PL_FILES => {'freewrl.PL' => 'freewrl'},
			  PREREQ_PM => {
							'Digest::MD5' =>  "2.09",
							'HTML::Parser' => "2.25",
							'MIME::Base64' => "2.11",
							'URI'          => "1.04",
							'LWP'          => "5.47",
						   },
			  LIBS => $VRML_CONFIG{FREEWRL_LIBS},
			  OBJECT => 'VRMLFunc.o',
);


sub MY::post_constants {
	my $post_const = join(
						  "\n",
						  qq{\nvpath %.c .:./CFuncs},
						  qq{vpath %.o .:./CFuncs\n},
						  qq{CFUNCS_SRC:=\$(wildcard ./CFuncs/*.c)},
						  qq{OBJECT+=\$(CFUNCS_SRC:%c=%o)}
						 );

	return $post_const;
}

sub MY::dynamic_lib {
"ARMAYBE = :
OTHERLDFLAGS = $VRML_CONFIG{LDFLAGS} 
INST_DYNAMIC_DEP = 

\$\(INST_DYNAMIC\): \$\(OBJECT\) \$\(MYEXTLIB\) \$\(BOOTSTRAP\) \$\(INST_ARCHAUTODIR\)/.exists \$\(EXPORT_LIST\) \$\(PERL_ARCHIVE\) \$\(PERL_ARCHIVE_AFTER\) \$\(INST_DYNAMIC_DEP\)
	\$\(RM_F\) \$\@
	LD_RUN_PATH=\$\(LD_RUN_PATH\) \$\(LD\) \$\(LDFROM\) \$\(OTHERLDFLAGS\) -o \$\@ \$\(MYEXTLIB\) \$\(PERL_ARCHIVE\) \$\(LDLOADLIBS\) \$\(PERL_ARCHIVE_AFTER\) \$\(EXPORT_LIST\)
	\$\(CHMOD\) \$\(PERM_RWX\) \$\@
"
}

sub MY::postamble {
    my @postamble;

    ## Add extra make instructions that don't quite fit into the
    ## ExtUtils::MakeMaker framework.

    push(@postamble, join(
						  "\n",
						  qq{\# --- VRML::VRMLFunc:\n},
						  qq{VRMLFunc.pm VRMLFunc.xs: VRMLC.pm VRMLFields.pm VRMLNodes.pm VRMLRend.pm VRMLExtrusion.pm},
						  qq{\t\$(PERL) VRMLC.pm\n}
						 ));

	if ($VRML_CONFIG{NETSCAPE_INST}) {
		push(@postamble, join(
							  "\n",
							  qq{\# --- Mozilla/Netscape Plugin:\n},
							  qq{install ::},
							  qq{\t\@cd Plugin && \$(MAKE) install\n}
							 ));
	}

	if ($VRML_CONFIG{JAVA_INST} && $VRML_CONFIG{NETSCAPE_CLASSES}) {
		push(@postamble, join(
							  "\n",
							  qq{\# --- Java Archive\n},
							  qq{install ::},
							  qq{\t\@cd java && \$(MAKE) install\n}
							 ));
	}

	push(@postamble, join(
						  "\n",
						  qq{\# copy fonts, libjs.org etc over\n},
						  qq{install ::},
						  qq{\# cp -r fonts},
						  qq{\techo \$(PERL_ARCHLIB);},
						  qq{\tcp -r fonts \$(SITEARCHEXP)/VRML},
						  qq{\tcp -r x3d \$(SITEARCHEXP)/VRML\n}
						 ));

	push(@postamble, join(
						  "\n",
						  qq{clean ::},
						  qq{\tcd JS/$jsdir && \$(MAKE) -f Makefile.ref BUILD_OPT=$BUILD_OPT clean\n}
						 ));

	push(@postamble, join(
						  "\n",
						  qq{distclean :: realclean},
						  qq{\tcd JS/$jsdir && \$(MAKE) -f Makefile.ref BUILD_OPT=$BUILD_OPT clobber}
						 ));

	return join("\n", @postamble);
}
