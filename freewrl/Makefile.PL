# Copyright (C) 1998 Tuomas J. Lukka 1999, 2005, 2006 John Stewart CRC Canada.
# DISTRIBUTED WITH NO WARRANTY, EXPRESS OR IMPLIED.
# See the GNU Library General Public License (file COPYING in the distribution)
# for conditions of use and redistribution.

# what OS are we running under?
my $OS = `uname`;
my $HAVE_UBUNTU = "NO";
chomp ($pwd = getcwd());

# remove whitespace at beginning and end.
$OS =~ s/\s+$//;
$OS =~ s/^\s+//;

print "\n";
if ($OS eq "Darwin") { print "This install is running on an Apple OS X computer\n";
} elsif ($OS eq "Linux") { print "This install is running on a Linux based computer\n";
} else { print "The uname command returned $OS - dont know what platform - assuming Linux\n"; }

# create the generated code/header files.
system "perl VRMLC.pm";

my $VERSION = "V1.18.7";

use Cwd qw(getcwd chdir);


# get the correct.conf file.
if ($OS eq "Darwin") {
	require './vrml.conf.aqua';
} else {
	# assume a Linux computer.
	my $ARCH = `arch`;

	# remove whitespace at beginning and end.
	$ARCH =~ s/\s+$//;
	$ARCH =~ s/^\s+//;

	# find out what the distribution is.
	my ($rpm_prefix,$sourcepackage, $rpmversion, $osname, $specfile) = linux_system_info();

	# is this an Ubuntu distro?? 
	if (substr($osname,0,6) eq "Ubuntu") {
		$HAVE_UBUNTU = "YES";
		require './vrml.conf.ubuntu';
		if ($ARCH eq "x86_64") {
			$VRML_CONFIG{PLUGIN_EXTRA_DEFINES}= "-fPIC";
		} else {
			$VRML_CONFIG{PLUGIN_EXTRA_DEFINES}= "";
		}

	# we can use the generic distros for the architecture.
	} else {
		if ($ARCH eq "x86_64") {
			# 64 bit architecture.
			require './vrml.conf.x86_64';
			$VRML_CONFIG{PLUGIN_EXTRA_DEFINES}= "-fPIC";
		} else {
			# standard 32 bit architecture
			require './vrml.conf';
			$VRML_CONFIG{PLUGIN_EXTRA_DEFINES}= "";
		}
	}

	# add these keys for later use when making distribution (rpm) file
	$VRML_CONFIG{RPMPREFIX} = $rpm_prefix;
	$VRML_CONFIG{SOURCEPACKAGE} = $sourcepackage;
	$VRML_CONFIG{RPMVERSION} = $rpmversion;
	$VRML_CONFIG{OSNAME} = $osname;
	$VRML_CONFIG{SPECFILE} = $specfile;

	# Can we add FreeWRL to the desktop?
	$VRML_CONFIG{DESKTOP} = "NO";	# default value.
	if (-e "/usr/share/applications") {
		if (-e "/usr/share/pixmaps") {
			$VRML_CONFIG{DESKTOP} = "/usr/share";
		}
	}

}

$VRML_CONFIG{VERSION} = $VERSION;

# save this for JS/Makefile.PL
$VRML_CONFIG{PLATFORM} = $OS;

## Handle platform-specific compile options for the Javascript engine
## and others specific to FreeWRL.

my $sitearchjsdir = "\$(INSTALLPRIVLIB)/auto/VRML/JS";

my $jsdir = "js1.5/src";
my $jsobjdir;

my @ccflags;
my @inc;
my @libs;
my @ldflags;
my @jsinc;
my @jslibs;


if ($OS eq  "IRIX64") {
	$jsobjdir = "$jsdir/IRIX6.5";
} elsif ($OS eq "Darwin") {
	$jsobjdir = "$jsdir/Darwin";
} elsif ($OS eq "SunOS") {
	$jsobjdir = "$jsdir/SunOS5.8";
} else { ## linux used by default
	$jsobjdir = "$jsdir/Linux_All";
}

$jsobjdir .= "_OPT.OBJ";

if ($VRML_CONFIG{BOUNDS_CHECK} eq "on") {
	print "MAKING WITH BOUNDSCHECKING ENABLED\n";
	push @inc, "-fbounds-checking";
	push @ldflags, "-L$VRML_CONFIG{LIBCHECK_INST}";
	push @libs, "-L$VRML_CONFIG{LIBCHECK_INST}";
}

push @inc, $VRML_CONFIG{FREEWRL_INC}, "-IJS/$jsobjdir", "-IJS/$jsdir", "-ICFuncs -ICFrontEnd ";
push @libs, $VRML_CONFIG{FREEWRL_LIBS}, "-LJS/$jsobjdir", "-lFreeWRLjs";
push @ldflags, $VRML_CONFIG{LDFLAGS}, "-LJS/$jsobjdir";

# push build directory, for running standalone

$VRML_CONFIG{FREEWRL_CCFLAGS} = join(' ', @ccflags);
$VRML_CONFIG{FREEWRL_INC} = join(' ', @inc);
$VRML_CONFIG{FREEWRL_LIBS} = join(' ', @libs);
$VRML_CONFIG{LDFLAGS} = join(' ', @ldflags);
$VRML_CONFIG{LIBJS_INST} = $sitearchjsdir;

if (defined $VRML_CONFIG{'USE_JAVA_HOME'})
{
	$VRML_CONFIG{JAVA} = $ENV{JAVA_HOME}.'/bin/java';
	$VRML_CONFIG{JAVA_INST} = $ENV{JAVA_HOME};
}

# print out the CFuncs/vrmlconf.c C header file.
open OUT, ">CFuncs/vrmlconf.h" or die("Couldn't write to CFuncs/vrmlconf.h");
print OUT "/* AUTOMATICALLY GENERATED BY TOP-LEVEL MAKEFILE.PL -- DO NOT EDIT */\n\n\n";

# is this building on a Darwin/OSX machine? if so, lets define AQUA.
if ($OS eq "Darwin") {
	print OUT "#define AQUA\n";
}

# lets write some generated #defines.

print OUT "#define BUILDDIR \"$pwd\"\n";
print OUT "#define FWVER \"",$VERSION,"\"\n";
print OUT "#define XMESSAGE \"",$VRML_CONFIG{BIN_DIR},"/FreeWRL_Message\"\n";
print OUT "#define SOUNDSERVERBINARY \"",$VRML_CONFIG{BIN_DIR},"/FreeWRL_SoundServer\"\n";

# lets just dump out some standard defines, from the vrml.conf file.
my @dumpToVRMLCONF = ( "BROWSER", "SOUNDCONV", "UNZIP", "WGET", "CONVERT", "COPIER", "JAVA");

foreach (@dumpToVRMLCONF) {
	if (defined $VRML_CONFIG{$_}) {
		if (!(-e $VRML_CONFIG{$_})) {
			print "WARNING: Check your specific vrml.conf file; can not find system executable ".
				$VRML_CONFIG{$_}." for identifier $_\n";
		}
		print OUT "#define\t$_\t\t";
                print OUT '"',$VRML_CONFIG{$_},'"';
 	} else {
		print OUT "#define\t$_\t\t";
		print OUT '"',"$_"."ISNOTDEFINED",'"';
 	}
 	print OUT "\n";
}
close OUT;



#######################################################################################
# write the Makefile
#######################################################################################

open MK, ">Makefile" or die("Couldn't write the Makefile");

if ($OS ne "Darwin") {
	write_linux_makefile_initialize();
	write_linux_makefile_libfreewrl();
	write_linux_makefile_cfrontend();
	write_linux_makefile_soundengine();
	write_linux_makefile_freewrlmessage();
	write_linux_makefile_javascript();
	write_linux_makefile_javaClasses();
	write_linux_makefile_makeBrowserPlugin();
	write_linux_makefile_clean_distclean();
} else {
	print "OS X Makefile code not complete yet\n";
}


print "Now, the Makefile is complete. Type \"make\" and\/or \"make install\" to build (and install)\n\n";

sub write_linux_makefile_initialize() {	
	my $FRONTEND_DIR  = $VRML_CONFIG{BIN_DIR};
	my $LIB_DIR       = $VRML_CONFIG{LIB_DIR};
	my $MYINC         = $VRML_CONFIG{FREEWRL_INC};
	my $MYLIBS 	= $VRML_CONFIG{FREEWRL_LIBS};

	my $MYLDFLAGS     = $VRML_CONFIG{LDFLAGS};
	my $MYDEFINE      = $VRML_CONFIG{FREEWRL_DEFINE};

	my $MYFELIBS =  "-L. ". $MYLIBS . " -lFreeWRLFunc -lpthread";
	my $MYSELIBS = "-lm ";
	my $MYMESLIBS = "-lXaw ";

	# are we compiling the front end with Motif or GTK2?
	if (index ($VRML_CONFIG{FREEWRL_DEFINE},"HAVE_MOTIF") > 0) {
		 $MYFELIBS = $MYFELIBS . " -lXm ";
	}

	# compiling with bounds checking??
	if ($VRML_CONFIG{BOUNDS_CHECK} eq "on") {
		print "COMPILING WITH BOUNDSCHECKING\n";
		 $MYFELIBS = $MYFELIBS . " -lboundscheck";
		 $MYSELIBS = $MYSELIBS . " -lboundscheck";
		 $MYMESLIBS = $MYMESLIBS . " -lboundscheck";
	}
	
	
	open ID, ">CFuncs/installdir.h" or die ("Couldn't create installdir.h");
	print ID "#define INSTALLDIR \"\/tmp\"\n";
	close ID;
	
	# do the headers.
	print MK "#Make file for FreeWRL\n";
	print MK "CC = gcc\n";
	print MK "JAVAC = javac\n";
	print MK "INC = $MYINC\n";
	print MK "DEFINE = $MYDEFINE\n";
	print MK "FWFLAGS = -c -Wall -O2 -g -pipe -m32 -march=i386 -mtune=pentium4\n";
	print MK "MYLIBS = $MYLIBS\n";
	print MK "MYFELIBS = $MYFELIBS\n";
	print MK "MYSELIBS = $MYSELIBS\n";
	print MK "MYMESLIBS = $MYMESLIBS\n";
	print MK "FRONTEND_DIR = $FRONTEND_DIR\n";
	print MK "LIB_DIR = $LIB_DIR\n";
	
	print MK "\n";
	print MK "all: Javascript libFreeWRL FreeWRL_Message CFrontEnd freewm JavaClasses";
	if ($VRML_CONFIG{SOUND_ENGINE}) { print MK " SoundEngine"; }
	print MK "\n";

	print MK "install:\tall	\n	strip freewrl\n	cp freewrl \$(FRONTEND_DIR)\n";
	print MK "\tstrip FreeWRL_Message/FreeWRL_Message\n";
	print MK "\tcp FreeWRL_Message/FreeWRL_Message \$(FRONTEND_DIR)\n";
	if ($OS eq "Linux") {
			print MK "\tcp libFreeWRLFunc.so \$(LIB_DIR)\n";
			print MK "\t/sbin/ldconfig\n";
	}
	if ($VRML_CONFIG{SOUND_ENGINE}) { 
		print MK "\tstrip SoundEngine/FreeWRL_SoundServer\n";
		print MK "\tcp SoundEngine/FreeWRL_SoundServer \$(FRONTEND_DIR)\n";
	}
	
}

sub write_linux_makefile_libfreewrl() {
	#############################################################################
	#LIBFREEWRL
	my @CFuncsSourceFiles = split (' ',`ls CFuncs/*c`);
	foreach my $fullname (@CFuncsSourceFiles) {
		# remove the CFuncs from the front, and the .c from the end.
		my $nm = $fullname;
		$nm =~ s/.c$//; $nm =~ s/CFuncs.//;
	
		print MK "$nm:\n	\$(CC) \$(FWFLAGS) \$(INC) \$(DEFINE) $fullname -o CFuncs\/$nm.o\n";
	}
	print MK "\n# make the shared library\n";
	print MK "libFreeWRL:\t";
	
        foreach my $fullname (@CFuncsSourceFiles) {
                # remove the CFuncs from the front, and the .c from the end.
                my $nm = $fullname;
                $nm =~ s/.c$//; $nm =~ s/CFuncs.//;

                print MK "$nm ";
        }
        print MK "\n\n";

	
	print MK "	\$(CC) -shared ";
	foreach my $fullname (@CFuncsSourceFiles) {
		$fullname =~ s/.c$/.o/;
		print MK "$fullname ";
	}
	print MK " -o libFreeWRLFunc.so \$(MYLIBS)\n";;
}
	
sub write_linux_makefile_cfrontend() {
	#############################################################################
	#CFRONTEND
	print MK "\n# make the Unix front end\n";
	my @CFrontEndSourceFiles = split (' ',`ls CFrontEnd/*c`);
	foreach my $fullname (@CFrontEndSourceFiles) {
		# remove the CFrontEnd from the front, and the .c from the end.
		my $nm = $fullname;
		$nm =~ s/.c$//; $nm =~ s/CFrontEnd.//;
	
		print MK "$nm:\n	\$(CC) \$(FWFLAGS) \$(INC) \$(DEFINE) $fullname -o CFrontEnd\/$nm.o\n";
	}
		
	print MK "CFrontEnd:\t";
	foreach my $fullname (@CFrontEndSourceFiles) {
		# remove the CFrontEnd from the front, and the .c from the end.
		my $nm = $fullname;
		$nm =~ s/.c$//; $nm =~ s/CFrontEnd.//;
		
		print MK "$nm ";
	}
	print MK "\n";
		
	print MK "	\$(CC) ";
	foreach my $fullname (@CFrontEndSourceFiles) {
		$fullname =~ s/.c$/.o/;
		print MK "$fullname ";
	}
	print MK " -o freewrl \$(MYFELIBS)\n";
}

sub write_linux_makefile_soundengine() {
	#############################################################################
	# SoundEngine
	# make the sound engine, console message, and frontend if NOT OSX.

	if ($VRML_CONFIG{SOUND_ENGINE}) {
		print MK "\n# make the Unix sound engine \n";
		my @SoundEngineSourceFiles = split (' ',`ls SoundEngine/*c`);
		foreach my $fullname (@SoundEngineSourceFiles) {
			# remove the SoundEngine from the front, and the .c from the end.
			my $nm = $fullname;
			$nm =~ s/.c$//; $nm =~ s/SoundEngine.//;
		
			print MK "$nm:\n	\$(CC) \$(FWFLAGS) \$(INC) \$(DEFINE) $fullname -o SoundEngine\/$nm.o\n";
		}
		
		print MK "SoundEngine:\t";
		foreach my $fullname (@SoundEngineSourceFiles) {
			# remove the SoundEngine from the front, and the .c from the end.
			my $nm = $fullname;
			$nm =~ s/.c$//; $nm =~ s/SoundEngine.//;
		
			print MK "$nm ";
		}
		print MK "\n";
		
		print MK "	\$(CC) ";
		foreach my $fullname (@SoundEngineSourceFiles) {
			$fullname =~ s/.c$/.o/;
			print MK "$fullname ";
		}
		print MK " -o SoundEngine/FreeWRL_SoundServer \$(MYLIBS) \$(MYSELIBS)\n";
	}
}


sub write_linux_makefile_freewrlmessage() {
	#############################################################################
	# FreeWRL_Message 
	# make a program that displays a message if NOT OSX and if we are not using Motif.

	print MK "freewm:\n";
	print MK "\t\$(CC) \$(FWFLAGS) \$(INC) \$(DEFINE) FreeWRL_Message/FreeWRL_Message.c -o FreeWRL_Message/FreeWRL_Message.o\n";
	print MK "FreeWRL_Message: freewm\n";
	print MK "\t\$(CC) FreeWRL_Message/FreeWRL_Message.o  -o FreeWRL_Message/FreeWRL_Message \$(MYLIBS) \$(MYMESLIBS) \n";
}

sub write_linux_makefile_javascript() {
	#############################################################################
	## make the Javascript libraries if needed
    
	print MK "Javascript:\n";
	print MK "\tcd JS/$jsdir; make -f Makefile.ref BUILD_OPT=1; cd $pwd\n";
}


sub write_linux_makefile_javaClasses() {
	my @JavaSourceFiles = split (' ',`find . -name "*java" | grep "java\/classes"`);
	foreach my $fullname (@JavaSourceFiles) {
		# remove the Java from the front, and the .c from the end.
		my $nm = $fullname;
		$nm =~ s/^\.\///; $nm =~ s/.java$//;
	
		print MK "$nm:\n	\$(JAVAC) -classpath java/classes $fullname\n";
	}
		
	print MK "JavaClasses:\t";
	foreach my $fullname (@JavaSourceFiles) {
		# remove the Java from the front, and the .c from the end.
		my $nm = $fullname;
		$nm =~ s/^\.\///; $nm =~ s/.java$//;
	
		print MK "$nm ";
	}
	print MK "\n";
		
	# make the jar file here
	#print MK "	\$(CC) ";
		#foreach my $fullname (@JavaSourceFiles) {
			#$fullname =~ s/.java$/.class/;
		#print MK "$fullname ";
	#}
	#print MK " -o Java/FreeWRL_SoundServer \$(MYLIBS) \$(MYSELIBS)\n";
}


sub write_linux_makefile_makeBrowserPlugin() {
}

sub write_linux_makefile_clean_distclean() {
	#############################################################################
	# Misc targets
	print MK "\nclean:\n";
	print MK "	rm -f CFuncs/*o\n";
	print MK "	rm -f libFreeWRLFunc.so\n";
	print MK "	rm -f FreeWRL_Message/*o\n";
	print MK "	rm -f FreeWRL_Message/FreeWRL_Message\n";
	print MK "	rm -f CFrontEnd/*o\n";
	print MK "	rm -f freewrl\n";
	if ($VRML_CONFIG{SOUND_ENGINE}) {
		print MK "	rm -f SoundEngine/*o\n";
		print MK "	rm -f SoundEngine/FreeWRL_SoundServer\n";
	}
	print MK "	rm -f java/classes/vrml/external/field/*class\n";
	print MK "	rm -f java/classes/vrml/field/*class\n";
	print MK "	rm -f java/classes/vrml/external/node/*class\n";
	print MK "	rm -f java/classes/vrml/external/FreeWRLEAI/*class\n";
	print MK "	rm -f java/classes/vrml/external/*class\n";
	print MK "	rm -f java/classes/vrml/external/exception/*class\n";
	print MK "	rm -f java/classes/vrml/node/*class\n";
	print MK "	rm -f java/classes/vrml/*class\n";
	print MK "	rm -f java/classes/vrml/*class\n";
	print MK "	rm -f java/classes/sai/*class\n";
	print MK "	rm -f java/classes/sai/eai/*class\n";
	print MK "	rm -f java/classes/org/web3d/x3d/sai/*class\n";

	print MK "distclean:	clean\n";
}



###################################################################################
# determine on what system we are running, and if we can make a package for it for
# redistribution
sub linux_system_info() {
	
	my $rpm_prefix;
	my $osname;
	my $mightBeUbuntu = FALSE;
	
	# determine where the package should be built.
	# is this a Red Hat, Fedora package?
	#rpm_prefix = "/tmp";
	if (-e '/usr/src/redhat') {
		$rpm_prefix = "/usr/src/redhat";
	
	# is this SuSE/Novell linux??
	} elsif (-e '/usr/src/packages') {
		$rpm_prefix = "/usr/src/packages";

	# yikes - do not know...
	} else { $rpm_prefix = "/tmp"; }
		
	# what OS version is this built on? each Linux release has a different
	# file name here - might be /etc/SuSE-release. 

	my $distrib = `lsb_release --id | cut -f2`;
	$distrib =~ s/\b(\w)/\U$1/g;
	# remove trailing cr
	$distrib =~s/\n.*//;

	my $ver = `lsb_release --release | cut -f2`;
	# remove trailing cr
	$ver =~s/\n.*//;

	$osname = $distrib.$ver;
	
	if ($osname eq "") {
		print "could not determine how to make redistributable packages on this system \n";
		print "so the make rpm target will not work - oh well!\n";
		$osname = "unknown";
	}
	#print "osname is: $osname\n";
	
	
	# sourcepackage is a file created by "packagemaker" - it contains the version, etc.
	my $sourcepackage = `cat sourcepackage`;
	# remove whitespace at beginning and end of this package name (check packagemaker in CVS tree)
	$sourcepackage =~ s/\s+$//;
	$sourcepackage =~ s/^\s+//;
	my $srcdir = substr($sourcepackage, 0, rindex ($sourcepackage,".tar"));
	my $rpmversion = substr ($srcdir,index($srcdir,"-")+1,100);
	#print "srcdir $srcdirrpmversion $rpmversion sourcepackage $sourcepackage\n";
	
	# make spec file name.
	my $specfile = "$rpm_prefix/SPECS/".$srcdir.".".$osname.".spec";
	#print "spec file is $specfile\n";
	
	return ($rpm_prefix,$sourcepackage, $rpmversion, $osname, $specfile);
}

