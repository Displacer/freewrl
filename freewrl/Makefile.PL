# Copyright (C) 1998 Tuomas J. Lukka 1999, John Stewart CRC Canada.
# DISTRIBUTED WITH NO WARRANTY, EXPRESS OR IMPLIED.
# See the GNU Library General Public License (file COPYING in the distribution)
# for conditions of use and redistribution.

#
# Config system idea from PDL
#

system "perl VRMLC.pm";

$VERSION = "0.34";

BEGIN {
 eval "use 5.004";
 warn "VRML::Browser requires Perl v5.0.4 or later -- go to http://www.perl.com"
  if $@;
}

use Cwd qw(getcwd chdir);

# Remove our config argument
@ARGV = map {
	if(/^CONF=(.*)$/) {
		$vrml_conf_file = $1; ();
	} else {
		$_
	}
} @ARGV;

if(!defined $vrml_conf_file) {
	my $defname = "$ENV{HOME}/.vrml.conf";
	if(-e $defname) {
		$vrml_conf_file = $defname;
	}
}

require './vrml.conf';
%VRML_CONFIG_DIST = %VRML_CONFIG;

if(defined $vrml_conf_file) {
 if(!-e $vrml_conf_file) {
	die("Invalid config file '$vrml_conf_file' specified");
 }
 print "Reading configuration from file '$vrml_conf_file'\n";
 require $vrml_conf_file;
}

for(keys %VRML_CONFIG) {
	if(!exists($VRML_CONFIG_DIST{$_})) {
		die("Invalid key '$_' found in user supplied file '$vrml_conf_file'.
This key may no longer be in use, or someone may have garbled the 'vrml.conf' 
file in the distribution. Please correct and try again");
	}
}

%VRML_CONFIG = (%VRML_CONFIG_DIST, %VRML_CONFIG);

print STDERR "Writing Config.pm\n";
open OUT, ">Config.pm" or die("Couldn't write to Config.pm");
print OUT "# AUTOMATICALLY GENERATED BY TOP-LEVEL MAKEFILE.PL -- DO NOT EDIT
\%VRML::Config = (
";
for(keys %VRML_CONFIG) {
	print OUT "\t$_\t=>\t";
	if(defined $VRML_CONFIG{$_}) {
                print OUT '"',quotemeta($VRML_CONFIG{$_}),'"';
	} else {
		print OUT "undef";
	}
	print OUT ",\n";
}
print OUT "VERSION => \"$VERSION\"\n";
print OUT ");\n";
chomp ($a = `which convert`);
chomp ($pwd = getcwd());
chomp ($java = `which java`);
print OUT qq(\$VRML::Browser::CONVERT = "$a";\n);
print OUT qq(\$VRML::ENV{FREETYPE_FONT_PATH} = "$VRML_CONFIG{FREETYPE_FONT_PATH}";\n);
print OUT qq(\$VRML::ENV{FREEWRL_FONTS} = "$pwd/fonts";\n);
print OUT qq(\$VRML::Browser::X3DTOVRMLXSL = "$pwd/x3d/X3dToVrml97.xsl";\n);
print OUT "1;\n";
close OUT;

print "Note that 'convert' cannot be found\n" unless $a ;

## Check for required Javascript libraries,
## if they don't exist, make them.

print "Checking for the Mozilla JavaScript Reference library and application.\n";
if (-e "JS/js/Linux_All_DBG.OBJ/libjs.a" && -e "JS/js/Linux_All_DBG.OBJ/js") {
    print "The Javascript library and application were found.\n";
} else {
    print "The Javascript library and application were not found - make them.\n";
    chdir("JS/js");
    system("make");
    chdir($pwd);
}

use ExtUtils::MakeMaker;
WriteMakefile(
      ## OPTIMIZE => "-g",
	NAME => "VRML::VRMLFunc",
	DISTNAME => "FreeWRL",
	dist => {
		COMPRESS => 'gzip -9', SUFFIX => 'gz',
	},
    VERSION => $VERSION,
    DEFINE => $VRML_CONFIG{OPENGL_DEFINE},
    INC => $VRML_CONFIG{OPENGL_INC},
    EXE_FILES => ['freewrl'],
    MAN1PODS => { 'freewrl' => '$(INST_MAN1DIR)/freewrl.$(MAN1EXT)' },
    PL_FILES => {'freewrl.PL' => 'freewrl'},
    PREREQ_PM => { 'Digest::MD5' =>  "2.09",
		   'HTML::Parser' => "2.25",
		   'MIME::Base64' => "2.11",
		   'URI'          => "1.04",
		   'Image::Base'  => "1.07",
		   'LWP'          => "5.47",
		 },
   LIBS => $VRML_CONFIG{OPENGL_LIBS},
   OBJECT => 'VRMLFunc.o CFuncs/Polyrep.o CFuncs/NormalCalcs.o CFuncs/Tess.o CFuncs/Textures.o CFuncs/LinearAlgebra.o CFuncs/MPEG_Utils.o CFuncs/Text.o',
);

sub MY::postamble {
    ## Add extra make instructions that don't quite fit into the
    ## ExtUtils::MakeMaker framework.

    my @postamble = ();
    push(@postamble,
q{
# --- VRML::VRMLFunc:

VRMLFunc.pm VRMLFunc.xs: VRMLC.pm VRMLFields.pm VRMLNodes.pm VRMLRend.pm VRMLExtrusion.pm
	$(PERL) VRMLC.pm
});

    if ($VRML_CONFIG{NETSCAPE_INST}) {
	push(@postamble,
q{
# --- Netscape Plugin:

install :: install_plugin
	@$(NOOP) 

install_plugin ::
	@cd Plugin && $(MAKE) install_plugin
});
    }

    if ($VRML_CONFIG{JAVA_INST} && $VRML_CONFIG{NETSCAPE_CLASSES}) {
	push(@postamble,
q{
# --- Java Archive

install ::
	@cd java && $(MAKE) install
});
    }

    return(join('', @postamble));
}
