/* DO NOT EDIT THIS FILE - it is machine generated */
#include "jri.h"

/* Header for class FreeWRL */

#ifndef _FreeWRL_H_
#define _FreeWRL_H_

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

struct java_lang_String;
struct java_lang_Class;

/*******************************************************************************
 * Class FreeWRL
 ******************************************************************************/

typedef struct FreeWRL FreeWRL;

#define classname_FreeWRL	"FreeWRL"

#define class_FreeWRL(env) \
	((struct java_lang_Class*)JRI_FindClass(env, classname_FreeWRL))

/*******************************************************************************
 * Public Methods
 ******************************************************************************/

#ifdef DEBUG

/*** public static fact (I)I ***/
extern JRI_PUBLIC_API(jint)
FreeWRL_fact(JRIEnv* env, struct java_lang_Class* clazz, jint a);

/*** public doit (Ljava/lang/String;)V ***/
extern JRI_PUBLIC_API(void)
FreeWRL_doit(JRIEnv* env, struct FreeWRL* self, struct java_lang_String *a);

#else /* !DEBUG */

/*** public static fact (I)I ***/
#define FreeWRL_fact(env, clazz, a) \
	((jint)JRI_CallStaticMethodInt(env)(env, JRI_CallStaticMethod_op, clazz, methodID_FreeWRL_fact, a))

/*** public doit (Ljava/lang/String;)V ***/
#define FreeWRL_doit(env, obj, a) \
	((void)JRI_CallMethod(env)(env, JRI_CallMethod_op, obj, methodID_FreeWRL_doit, a))

#endif /* !DEBUG*/

/*** public static fact (I)I ***/
extern JRIMethodID FAR methodID_FreeWRL_fact;
#define name_FreeWRL_fact	"fact"
#define sig_FreeWRL_fact 	"(I)I"
#define use_FreeWRL_fact(env, clazz)	\
	(methodID_FreeWRL_fact =	\
		JRI_GetStaticMethodID(env, clazz,	\
			name_FreeWRL_fact,	\
			sig_FreeWRL_fact))
#define unuse_FreeWRL_fact(env, clazz)	\
	(methodID_FreeWRL_fact = JRIUninitialized)

/*** public doit (Ljava/lang/String;)V ***/
extern JRIMethodID FAR methodID_FreeWRL_doit;
#define name_FreeWRL_doit	"doit"
#define sig_FreeWRL_doit 	"(Ljava/lang/String;)V"
#define use_FreeWRL_doit(env, clazz)	\
	(methodID_FreeWRL_doit =	\
		JRI_GetMethodID(env, clazz,	\
			name_FreeWRL_doit,	\
			sig_FreeWRL_doit))
#define unuse_FreeWRL_doit(env, clazz)	\
	(methodID_FreeWRL_doit = JRIUninitialized)

/*******************************************************************************
 * IMPLEMENTATION SECTION: 
 * Define the IMPLEMENT_FreeWRL symbol 
 * if you intend to implement the native methods of this class. This 
 * symbol makes the private and protected methods available. You should 
 * also call the register_FreeWRL routine 
 * to make your native methods available.
 ******************************************************************************/

extern JRI_PUBLIC_API(struct java_lang_Class*)
use_FreeWRL(JRIEnv* env);

extern JRI_PUBLIC_API(void)
unuse_FreeWRL(JRIEnv* env);

extern JRI_PUBLIC_API(struct java_lang_Class*)
register_FreeWRL(JRIEnv* env);

extern JRI_PUBLIC_API(void)
unregister_FreeWRL(JRIEnv* env);

#ifdef IMPLEMENT_FreeWRL

/*******************************************************************************
 * Native Methods: 
 * These are the signatures of the native methods which you must implement.
 ******************************************************************************/

/*** native printToStdout (Ljava/lang/String;)V ***/
extern JRI_PUBLIC_API(void)
native_FreeWRL_printToStdout(JRIEnv* env, struct FreeWRL* self, struct java_lang_String *a);

/*******************************************************************************
 * Implementation Field Accessors: 
 * You should only use these from within the native method definitions.
 ******************************************************************************/

#ifdef DEBUG

/*** count I ***/
extern JRI_PUBLIC_API(jint)
get_FreeWRL_count(JRIEnv* env, FreeWRL* obj);
extern JRI_PUBLIC_API(void)
set_FreeWRL_count(JRIEnv* env, FreeWRL* obj, jint v);

#else /* !DEBUG */

/*** count I ***/
#define get_FreeWRL_count(env, obj) \
	(JRI_GetFieldInt(env, obj, fieldID_FreeWRL_count))
#define set_FreeWRL_count(env, obj, v) \
	JRI_SetFieldInt(env, obj, fieldID_FreeWRL_count, v)

#endif /* !DEBUG*/

extern JRIFieldID FAR fieldID_FreeWRL_count;
#define name_FreeWRL_count	"count"
#define sig_FreeWRL_count 	"I"
#define use_FreeWRL_count(env, clazz)	\
	(fieldID_FreeWRL_count =	\
		JRI_GetFieldID(env, clazz,	\
			name_FreeWRL_count,	\
			sig_FreeWRL_count))
#define unuse_FreeWRL_count(env, clazz)	\
		(fieldID_FreeWRL_count = JRIUninitialized)

/*******************************************************************************
 * Implementation Methods: 
 * You should only use these from within the native method definitions.
 ******************************************************************************/

#ifdef DEBUG

/*** native printToStdout (Ljava/lang/String;)V ***/
extern JRI_PUBLIC_API(void)
FreeWRL_printToStdout(JRIEnv* env, struct FreeWRL* self, struct java_lang_String *a);

/*** <init> ()V ***/
extern JRI_PUBLIC_API(struct FreeWRL*)
FreeWRL_new(JRIEnv* env, struct java_lang_Class* clazz);

#else /* !DEBUG */

/*** native printToStdout (Ljava/lang/String;)V ***/
#define FreeWRL_printToStdout(env, obj, a) \
	((void)JRI_CallMethod(env)(env, JRI_CallMethod_op, obj, methodID_FreeWRL_printToStdout, a))

/*** <init> ()V ***/
#define FreeWRL_new(env, clazz)	\
	((struct FreeWRL*)JRI_NewObject(env)(env, JRI_NewObject_op, clazz, methodID_FreeWRL_new))

#endif /* !DEBUG*/

/*** native printToStdout (Ljava/lang/String;)V ***/
extern JRIMethodID FAR methodID_FreeWRL_printToStdout;
#define name_FreeWRL_printToStdout	"printToStdout"
#define sig_FreeWRL_printToStdout 	"(Ljava/lang/String;)V"
#define use_FreeWRL_printToStdout(env, clazz)	\
	(methodID_FreeWRL_printToStdout =	\
		JRI_GetMethodID(env, clazz,	\
			name_FreeWRL_printToStdout,	\
			sig_FreeWRL_printToStdout))
#define unuse_FreeWRL_printToStdout(env, clazz)	\
	(methodID_FreeWRL_printToStdout = JRIUninitialized)

/*** <init> ()V ***/
extern JRIMethodID FAR methodID_FreeWRL_new;
#define name_FreeWRL_new	"<init>"
#define sig_FreeWRL_new 	"()V"
#define use_FreeWRL_new(env, clazz)	\
	(methodID_FreeWRL_new =	\
		JRI_GetMethodID(env, clazz,	\
			name_FreeWRL_new,	\
			sig_FreeWRL_new))
#define unuse_FreeWRL_new(env, clazz)	\
	(methodID_FreeWRL_new = JRIUninitialized)

#endif /* IMPLEMENT_FreeWRL */

#ifdef __cplusplus
} /* extern "C" */

/*******************************************************************************
 * C++ Definitions
 ******************************************************************************/

#include "netscape_plugin_Plugin.h"

struct FreeWRL : public netscape_plugin_Plugin {

	static struct java_lang_Class* _use(JRIEnv* env) {
		return use_FreeWRL(env);
	}

	static void _unuse(JRIEnv* env) {
		unuse_FreeWRL(env);
	}

	static struct java_lang_Class* _register(JRIEnv* env) {
		return register_FreeWRL(env);
	}

	static void _unregister(JRIEnv* env) {
		unregister_FreeWRL(env);
	}

	static struct java_lang_Class* _class(JRIEnv* env) {
		return class_FreeWRL(env);
	}

	/* Public Methods */
	/*** public static fact (I)I ***/
	static jint fact(JRIEnv* env, struct java_lang_Class* clazz, jint a) {
		return FreeWRL_fact(env, clazz, a);
	}

	/*** public doit (Ljava/lang/String;)V ***/
	void doit(JRIEnv* env, struct java_lang_String *a) {
		FreeWRL_doit(env, this, a);
	}

#ifdef IMPLEMENT_FreeWRL

#endif /* IMPLEMENT_FreeWRL */
};

#endif /* __cplusplus */

#endif /* Class FreeWRL */
